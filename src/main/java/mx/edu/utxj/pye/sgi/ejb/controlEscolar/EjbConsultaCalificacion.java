package mx.edu.utxj.pye.sgi.ejb.controlEscolar;import com.github.adminfaces.starter.infra.model.Filter;import mx.edu.utxj.pye.sgi.dto.PersonalActivo;import mx.edu.utxj.pye.sgi.dto.ResultadoEJB;import mx.edu.utxj.pye.sgi.dto.controlEscolar.*;import mx.edu.utxj.pye.sgi.ejb.EjbPersonalBean;import mx.edu.utxj.pye.sgi.entity.ch.Personal;import mx.edu.utxj.pye.sgi.entity.controlEscolar.*;import mx.edu.utxj.pye.sgi.entity.prontuario.AreasUniversidad;import mx.edu.utxj.pye.sgi.entity.prontuario.ConfiguracionPropiedades;import mx.edu.utxj.pye.sgi.entity.prontuario.PeriodosEscolares;import mx.edu.utxj.pye.sgi.facade.Facade;import javax.annotation.PostConstruct;import javax.ejb.EJB;import javax.ejb.Stateless;import javax.persistence.EntityManager;import java.math.BigDecimal;import java.math.RoundingMode;import java.util.*;import java.util.stream.Collectors;import mx.edu.utxj.pye.sgi.entity.prontuario.Generaciones;@Statelesspublic class EjbConsultaCalificacion {    @EJB    Facade f;    @EJB    EjbAsignacionAcademica ejbAsignacionAcademica;    @EJB    EjbCapturaTareaIntegradora ejbCapturaTareaIntegradora;    @EJB    EjbCapturaCalificaciones ejbCapturaCalificaciones;    @EJB    EjbPersonalBean ejbPersonalBean;    @EJB    EjbPacker ejbPacker;    private EntityManager em;    @PostConstruct    public void init(){        em = f.getEntityManager();    }    /**     * Permite validar si el usuario logueado es del tipo estudiante     * @param matricula     * @return Regresa la instancia del estudiante si este cumple con lo mencionado     */    public ResultadoEJB<DtoEstudiante> validadEstudiante(Integer matricula){        try{            DtoEstudiante e = ejbPacker.packEstudiante(matricula).getValor();            if(e.getInscripcionActiva().getInscripcion().getTipoEstudiante().getIdTipoEstudiante().equals(Short.parseShort("1"))){                return ResultadoEJB.crearCorrecto(e, "El usuario ha sido comprobado como estudiante.");            }else {                return ResultadoEJB.crearErroneo(2, "El estudiante encontrado no tiene una inscripcion activa.", DtoEstudiante.class);            }        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "El personal docente no se pudo validar. (EjbConsultaCalificacion.validadEstudiante)", e, null);        }    }        public ResultadoEJB<DtoEstudiante> validadEstudianteK(Integer matricula){        try{            DtoEstudiante e = packEstudianteKardex(matricula).getValor();            if(e.getInscripcionActiva().getInscripcion().getTipoEstudiante().getIdTipoEstudiante().equals(Short.parseShort("1"))){                return ResultadoEJB.crearCorrecto(e, "El usuario ha sido comprobado como estudiante.");            }else {                return ResultadoEJB.crearErroneo(2, "El estudiante encontrado no tiene una inscripcion activa.", DtoEstudiante.class);            }        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "El personal docente no se pudo validar. (EjbConsultaCalificacion.validadEstudiante)", e, null);        }    }            /**     * Permite empaquetar un estudiante segun su matricula     * @param matricula Matricula del estudiante     * @return Estudiante empaquetado o código de error de lo contrario     */    public ResultadoEJB<DtoEstudiante> packEstudianteKardex(Integer matricula){        try{            //empaquetar estudiante            List<DtoInscripcion> dtoInscripciones = em.createQuery("select e from Estudiante e where e.matricula=:matricula order by e.periodo desc", Estudiante.class)                    .setParameter("matricula", matricula)                    .getResultStream()                    .map(estudiante -> packInscripcionK(estudiante))                    .filter(ResultadoEJB::getCorrecto)                    .map(ResultadoEJB::getValor)                    .collect(Collectors.toList());            if(dtoInscripciones.isEmpty()) return ResultadoEJB.crearErroneo(2, "No se pudo identificar ninguna inscripción de estudiante con la matrícula proporcionada.", DtoEstudiante.class);            Aspirante aspirante = dtoInscripciones.get(0).getInscripcion().getAspirante();            Persona persona = aspirante.getIdPersona();            DtoInscripcion dtoInscripcionActiva = dtoInscripciones.stream()                    .filter(DtoInscripcion::getActivo).max(Comparator.comparingInt(value -> value.getPeriodo().getPeriodo()))                    .orElse(null);            if(dtoInscripcionActiva == null) return ResultadoEJB.crearErroneo(2, "El estudiante no tiene inscripción activa.", DtoEstudiante.class);            DtoEstudiante dtoEstudiante = new DtoEstudiante(persona, aspirante, dtoInscripciones, dtoInscripcionActiva);//            System.out.println("dtoEstudiante = " + dtoEstudiante);            return ResultadoEJB.crearCorrecto(dtoEstudiante, "Estudiante empaquetado");        }catch (Exception e){            e.printStackTrace();            return ResultadoEJB.crearErroneo(1, "No se pudo empaquetar el estudiante a partir de su mattricula (EjbPacker.packEstudiante).", e, DtoEstudiante.class);        }    }        /**     * Permite empaquetar la inscripión a un grupo y periodo de un estudiante     * @param estudiante Instancia de la inscipción a empaquetar     * @return Regresa el empaquetado de la inscripción o código de error     */    public ResultadoEJB<DtoInscripcion> packInscripcionK(Estudiante estudiante){        try{            //empaquetar inscripción del estudiante            if(estudiante == null) return  ResultadoEJB.crearErroneo(2, "No se pudo identificar al estudiante con la matricula y grupo proporcionados.", DtoInscripcion.class);            if(estudiante.getCalificacionPromedioList().isEmpty()) return ResultadoEJB.crearErroneo(5, "No hay registro de promedios", DtoInscripcion.class);            Grupo grupo = estudiante.getGrupo();            if(grupo.getCargaAcademicaList().isEmpty()) return ResultadoEJB.crearErroneo(4, "El grupo no cuenta con materias asignadas", DtoInscripcion.class);                        ResultadoEJB<PeriodosEscolares> resPeriodoActivo = ejbPacker.getPeriodoActivo();            if(!resPeriodoActivo.getCorrecto()) return ResultadoEJB.crearErroneo(3, resPeriodoActivo.getMensaje(), DtoInscripcion.class);                        PeriodosEscolares periodo = em.find(PeriodosEscolares.class, estudiante.getPeriodo());            Generaciones generacion = em.find(Generaciones.class, grupo.getGeneracion());            DtoInscripcion dto = new DtoInscripcion(estudiante, grupo, periodo, generacion, periodo.equals(resPeriodoActivo.getValor()));            return ResultadoEJB.crearCorrecto(dto, "Estudiante empaquetado");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo empaquetar la inscripción del estudiante a partir de su mattricula (EjbPacker.packInscripcion).", e, DtoInscripcion.class);        }    }    /**     * Permite obtener el periodo activo.     * @return Regresa la instancia del periodo activo     */    public PeriodosEscolares getPeriodoActual() {        return (PeriodosEscolares) em.createStoredProcedureQuery("pye2.periodoEscolarActual", PeriodosEscolares.class)                .getResultStream().findFirst().orElse(null);    }    /**     * Permite obtener las lista de periodos a partir del periodo 52     * @return Regresa la lista de periodos encontrados     */    public ResultadoEJB<List<PeriodosEscolares>> obtenerListaPeriodosEscolares(){        try {            List<PeriodosEscolares> pe = em.createQuery("select p from PeriodosEscolares as p where p.periodo >= :periodo", PeriodosEscolares.class)                    .setParameter("periodo", 52).getResultStream().collect(Collectors.toList());            return ResultadoEJB.crearCorrecto(pe, "Lista completa de periodos");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.obtenerListaPeriodosEscolares)", e, null);        }    }    public ResultadoEJB<List<DtoCalificacionEstudiante.DtoCargaAcademica>> obtenerListaCargasAcademica(Estudiante matricula){        try{            List<DtoCalificacionEstudiante.DtoCargaAcademica> dtoCA = em                    .createQuery("select c from CargaAcademica as c where c.cveGrupo.idGrupo = :grupo", CargaAcademica.class)                    .setParameter("grupo", matricula.getGrupo().getIdGrupo())                    .getResultStream()                    .map(this::packCargaAcademica)                    .filter(ResultadoEJB::getCorrecto)                    .map(ResultadoEJB::getValor)                    .collect(Collectors.toList());            return ResultadoEJB.crearCorrecto(dtoCA, "Se empaqueto la lista de cargas académicas");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packMaterias)", e, null);        }    }    public ResultadoEJB<List<DtoCalificacionEstudiante.MateriasPorEstudiante>> packMaterias(Estudiante matricula){        try {            List<DtoCalificacionEstudiante.MateriasPorEstudiante> materiasPorEstudiante = new ArrayList<>();            List<DtoCalificacionEstudiante.DtoCargaAcademica> cargaAcademica = obtenerListaCargasAcademica(matricula).getValor();            cargaAcademica.forEach(x -> {                em.createQuery("select p from Personal as p where p.clave = :docente", Personal.class).setParameter("docente", x.getCarga().getDocente()).getResultStream()                        .collect(Collectors.toList()).forEach(z ->                                materiasPorEstudiante.add(new DtoCalificacionEstudiante.MateriasPorEstudiante(x.getCarga().getCveGrupo().getPeriodo(), x.getCarga().getCveGrupo(),                                        x.getCarga(), x.getCarga().getIdPlanMateria(), x.getCarga().getIdPlanMateria().getIdMateria(), z)));            });            return ResultadoEJB.crearCorrecto(materiasPorEstudiante, "Se empaquetaron las materias por estudiante seleccionado");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packMaterias)", e, null);        }    }    public ResultadoEJB<List<DtoCalificacionEstudiante.CalificacionePorUnidad>> packCalificacionesPorUnidadyMateria1(Estudiante matricula){        try{            List<DtoCalificacionEstudiante.CalificacionesPorDetalle> cpd = new ArrayList<>();            List<DtoCalificacionEstudiante.CalificacionePorCriterio> cpc = new ArrayList<>();            List<DtoCalificacionEstudiante.CalificacionePorUnidad> cpu = new ArrayList<>();            List<DtoCalificacionEstudiante.CalificacionePorUnidad> cpuFiltro;            List<DtoCalificacionEstudiante.CalificacionesPorUnidadyMateria> cpum1 = new ArrayList<>();            List<DtoCalificacionEstudiante.CalificacionesPorUnidadyMateria> cpum;            List<DtoCalificacionEstudiante.DtoCargaAcademica> cargaAcademicas = obtenerListaCargasAcademica(matricula).getValor();            cargaAcademicas.forEach(x -> {                    List<UnidadMateriaConfiguracion> umc = x.getCarga().getUnidadMateriaConfiguracionList().stream().filter(a -> a.getCarga().getCarga().equals(x.getCarga().getCarga())).collect(Collectors.toList());                    umc.forEach(y -> {                        List<UnidadMateriaConfiguracionDetalle> umcd = y.getUnidadMateriaConfiguracionDetalleList().stream().filter(b -> b.getConfiguracion().getConfiguracion().equals(y.getConfiguracion())).collect(Collectors.toList());                        umcd.forEach(w -> {                            List<UnidadMateriaConfiguracionCriterio> umcc = y.getUnidadMateriaConfiguracionCriterioList().stream().filter(d -> d.getCriterio1().getCriterio().equals(w.getCriterio().getCriterio()) && d.getUnidadMateriaConfiguracion().getConfiguracion().equals(y.getConfiguracion())).collect(Collectors.toList());                            umcc.forEach(t -> {                                if(w.getCalificacionList().isEmpty()){                                    List<Calificacion> calificacions = new ArrayList<>();                                    Calificacion cal = new Calificacion();                                    cal.setValor(0.0);                                    cal.setCalificacion(Long.parseLong("0"));                                    cal.setIdEstudiante(matricula);                                    cal.setConfiguracionDetalle(w);                                    calificacions.add(cal);                                    calificacions.stream().filter(c -> c.getIdEstudiante().getIdEstudiante().equals(matricula.getIdEstudiante()) && c.getConfiguracionDetalle().getConfiguracionDetalle().equals(w.getConfiguracionDetalle())).forEach(z -> {                                        cpum1.add(new DtoCalificacionEstudiante.CalificacionesPorUnidadyMateria(x.getCarga().getCveGrupo(), x.getCarga().getCveGrupo().getIdGrupo(), x.getCarga(),                                                x.getCarga().getCarga(), x.getCarga().getIdPlanMateria(), x.getCarga().getIdPlanMateria().getIdPlanMateria(),                                                x.getCarga().getIdPlanMateria().getIdMateria(), x.getCarga().getIdPlanMateria().getIdMateria().getIdMateria(),                                                y.getIdUnidadMateria(), y.getIdUnidadMateria().getIdUnidadMateria(), y, y.getConfiguracion(), w, w.getConfiguracionDetalle(),                                                t, t.getUnidadMateriaConfiguracion().getConfiguracion(), z, z.getCalificacion()));                                    });                                }else{                                    List<Calificacion> calificaciones = w.getCalificacionList().stream().filter(c -> c.getIdEstudiante().getIdEstudiante().equals(matricula.getIdEstudiante()) && c.getConfiguracionDetalle().getConfiguracionDetalle().equals(w.getConfiguracionDetalle())).collect(Collectors.toList());                                    calificaciones.forEach(z -> {                                        cpum1.add(new DtoCalificacionEstudiante.CalificacionesPorUnidadyMateria(x.getCarga().getCveGrupo(), x.getCarga().getCveGrupo().getIdGrupo(),                                                x.getCarga(), x.getCarga().getCarga(),                                                x.getCarga().getIdPlanMateria(), x.getCarga().getIdPlanMateria().getIdPlanMateria(), x.getCarga().getIdPlanMateria().getIdMateria(),                                                x.getCarga().getIdPlanMateria().getIdMateria().getIdMateria(),                                                y.getIdUnidadMateria(), y.getIdUnidadMateria().getIdUnidadMateria(), y, y.getConfiguracion(), w, w.getConfiguracionDetalle(),                                                t, t.getUnidadMateriaConfiguracion().getConfiguracion(), z, z.getCalificacion()));                                    });                                }                            });                        });                    });                });            cpum = new ArrayList<>(new HashSet<>(cpum1));            cpum.forEach(x -> {                BigDecimal porcentaje_detalle = new BigDecimal(x.getUnidadMateriaConfiguracionDetalle().getPorcentaje());                BigDecimal valor = BigDecimal.ZERO;                if(x.getCalificacion().getValor() != null){                    valor = new BigDecimal(x.getCalificacion().getValor());                }                BigDecimal promedio_detalle = porcentaje_detalle.divide(new BigDecimal(100)).multiply(valor);                cpd.add(new DtoCalificacionEstudiante.CalificacionesPorDetalle(x.getMateria(), x.getIdMateria(),                        x.getUnidadMateria(), x.getIdUnidadMateria(), x.getUnidadMateriaConfiguracion(), x.getIdUnidadMateriaConfiguracion(), x.getUnidadMateriaConfiguracionDetalle(),                        x.getIdUnidadMateriaConfiguracionDetalle(), x.getUnidadMateriaConfiguracionCriterio(), x.getIdUnidadMateriaConfiguracionCriterio(), x.getCalificacion(),                        x.getIdCalificacion(), porcentaje_detalle, valor, promedio_detalle));            });            cpd.forEach(x -> {                Estudiante estudiante = x.getCalificacion().getIdEstudiante();                BigDecimal sumaPromedio = cpd.stream().filter(a -> a.getIdUnidadMateriaConfiguracionCriterio().equals(x.getIdUnidadMateriaConfiguracionCriterio()) &&                        a.getIdMateria().equals(x.getIdMateria()) && a.getIdUnidadMateria().equals(x.getIdUnidadMateria()) &&                        a.getUnidadMateriaConfiguracionDetalle().getConfiguracionDetalle().equals(x.getUnidadMateriaConfiguracionDetalle().getConfiguracionDetalle()))                        .map(DtoCalificacionEstudiante.CalificacionesPorDetalle::getPromedio_detalle).reduce(BigDecimal.ZERO, BigDecimal::add);                BigDecimal porcentajeRecomendado = new BigDecimal(x.getUnidadMateriaConfiguracionCriterio().getCriterio1().getPorcentajeRecomendado());                BigDecimal promedioCriterio = porcentajeRecomendado.divide(new BigDecimal(100)).multiply(sumaPromedio);                cpc.add(new DtoCalificacionEstudiante.CalificacionePorCriterio(x.getIdMateria(), x.getMateria(), x.getIdUnidadMateria(), x.getUnidadMateria(),                        x.getUnidadMateriaConfiguracion(), x.getIdUnidadMateriaConfiguracionCriterio(), x.getUnidadMateriaConfiguracionCriterio(), x.getIdUnidadMateriaConfiguracionDetalle(),                        x.getUnidadMateriaConfiguracionDetalle(), estudiante, porcentajeRecomendado, promedioCriterio));            });            cpc.forEach(x -> {                Grupo grupo = x.getEstudiante().getGrupo();                BigDecimal porcentaje = new BigDecimal(x.getConfiguracion().getPorcentaje());                BigDecimal promedioUnidad = cpc.stream().filter(b -> b.getMateria().getIdMateria().equals(x.getMateria().getIdMateria()) &&                        b.getUnidadMateria().getIdUnidadMateria().equals(x.getUnidadMateria().getIdUnidadMateria()))                        .map(DtoCalificacionEstudiante.CalificacionePorCriterio::getPromedioCriterio).reduce(BigDecimal.ZERO, BigDecimal::add).setScale(2, RoundingMode.HALF_UP);                String escala = "";                if(promedioUnidad.compareTo(BigDecimal.valueOf(0)) == 0 || promedioUnidad.compareTo(BigDecimal.valueOf(8)) < 0){                    escala = "NA";                }                if(promedioUnidad.compareTo(BigDecimal.valueOf(10)) == 0){                    escala = "AU";                    if(x.getUnidadMateria().getIntegradora() == Boolean.TRUE){                        escala = "CA";                    }                }                if((promedioUnidad.compareTo(BigDecimal.valueOf(9)) >= 0) && (promedioUnidad.compareTo(BigDecimal.valueOf(10)) < 0)){                    escala = "DE";                    if(x.getUnidadMateria().getIntegradora() == Boolean.TRUE){                        escala = "CD";                    }                }                if(promedioUnidad.compareTo(BigDecimal.valueOf(8)) >= 0 && promedioUnidad.compareTo(BigDecimal.valueOf(9)) < 0){                    escala = "SA";                    if(x.getUnidadMateria().getIntegradora() == Boolean.TRUE){                        escala = "CO";                    }                }                cpu.add(new DtoCalificacionEstudiante.CalificacionePorUnidad(x.getMateria(), x.getUnidadMateria(), x.getConfiguracion(), x.getEstudiante(), escala, porcentaje, promedioUnidad));            });            cpuFiltro = new ArrayList<>(new HashSet<>(cpu));            return ResultadoEJB.crearCorrecto(cpuFiltro, "Se empaquetaron las materias por estudiante seleccionado");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packCalificacionesPorUnidadyMateria1)", e, null);        }    }    public ResultadoEJB<List<DtoCalificacionEstudiante.TareaIntegradoraPorMateria>> packTareaIntegradora(Estudiante matricula){        try {            List<DtoCalificacionEstudiante.TareaIntegradoraPorMateria> tipm = new ArrayList<>();            List<DtoCalificacionEstudiante.MateriasPorEstudiante> mpe = packMaterias(matricula).getValor();            mpe.forEach(x -> {                if(x.getCargaAcademica().getTareaIntegradora() != null){                    TareaIntegradora tareaIntegradora = x.getCargaAcademica().getTareaIntegradora();                    if(tareaIntegradora.getTareaIntegradoraPromedioList().isEmpty()){//                        System.out.println("Apartado 1");                        TareaIntegradoraPromedio tip = new TareaIntegradoraPromedio();                        TareaIntegradoraPromedioPK pk = new TareaIntegradoraPromedioPK(tareaIntegradora.getIdTareaIntegradora(), matricula.getIdEstudiante());                        tip.setTareaIntegradoraPromedioPK(pk); tip.setTareaIntegradora(tareaIntegradora); tip.setValor(0.0); tip.setEstudiante(matricula);                        List<TareaIntegradoraPromedio> listTIP = new ArrayList<>();                        listTIP.add(tip);                        listTIP.forEach(y -> {                            tipm.add(new DtoCalificacionEstudiante.TareaIntegradoraPorMateria(matricula, x.getGrupo(), x.getCargaAcademica(),                                    x.getPlanEstudioMateria(), x.getMateria(), tareaIntegradora, y));                        });                    }else{                                                tareaIntegradora.getTareaIntegradoraPromedioList().stream().filter(a -> a.getTareaIntegradora().getIdTareaIntegradora().equals(x.getCargaAcademica().getTareaIntegradora().getIdTareaIntegradora()) && a.getEstudiante().getIdEstudiante().equals(matricula.getIdEstudiante()))                                .forEach(y -> {//                                    System.out.println("Apartado 2");                            tipm.add(new DtoCalificacionEstudiante.TareaIntegradoraPorMateria(matricula, x.getGrupo(), x.getCargaAcademica(), x.getPlanEstudioMateria(), x.getMateria(), tareaIntegradora, y));                        });                    }                }else{//                    System.out.println("Apartado 3");                    TareaIntegradora ti = new TareaIntegradora();                    ti.setIdTareaIntegradora(0); ti.setCarga(x.getCargaAcademica()); ti.setFechaEntrega(new Date()); ti.setDescripcion(""); ti.setPorcentaje(0.0);                    TareaIntegradoraPromedio tip = new TareaIntegradoraPromedio();                    TareaIntegradoraPromedioPK pk = new TareaIntegradoraPromedioPK(ti.getIdTareaIntegradora(), matricula.getIdEstudiante());                    tip.setTareaIntegradoraPromedioPK(pk); tip.setTareaIntegradora(ti); tip.setValor(0.0); tip.setEstudiante(matricula);                    tipm.add(new DtoCalificacionEstudiante.TareaIntegradoraPorMateria(matricula, x.getGrupo(), x.getCargaAcademica(), x.getPlanEstudioMateria(), x.getMateria(), ti, tip));                }            });//            tipm.forEach(x -> {//                System.out.println(x.getEstudiante().getMatricula()+"-"+x.getTareaIntegradora().getIdTareaIntegradora()+"-"+x.getTareaIntegradoraPromedio().getValor());//            });            return ResultadoEJB.crearCorrecto(new ArrayList<>(new HashSet<>(tipm)), "Se empaquetaron las materias por estudiante seleccionado");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packCalificacionesPorUnidadyMateria1)", e, null);        }    }    public ResultadoEJB<List<DtoCalificacionEstudiante.TareaIntegradoraPresentacion>> tareaIntegradoraPresentacion(Estudiante estudiante){        List<DtoCalificacionEstudiante.TareaIntegradoraPorMateria> tipm = packTareaIntegradora(estudiante).getValor();        List<DtoCalificacionEstudiante.TareaIntegradoraPresentacion> tip = new ArrayList<>();        tipm.forEach(x -> {            BigDecimal porcentaje = new BigDecimal(x.getTareaIntegradora().getPorcentaje()).divide(new BigDecimal(100));            BigDecimal promedio = new BigDecimal(x.getTareaIntegradoraPromedio().getValor());            if(porcentaje.compareTo(new BigDecimal(0)) == 0 && promedio.compareTo(new BigDecimal(0)) == 0){                String percentage = "";                String notes = "";                tip.add(new DtoCalificacionEstudiante.TareaIntegradoraPresentacion(x.getGrupo(), x.getCargaAcademica(), x.getTareaIntegradoraPromedio(), notes, percentage));            }else{                String percentage = porcentaje.toString();                String notes = promedio.toString();                tip.add(new DtoCalificacionEstudiante.TareaIntegradoraPresentacion(x.getGrupo(), x.getCargaAcademica(), x.getTareaIntegradoraPromedio(), notes, percentage));            }        });        try {            return ResultadoEJB.crearCorrecto(new ArrayList<>(new HashSet<>(tip)), "Se empaquetaron las materias por estudiante seleccionado");        } catch (Exception e) {            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packCalificacionesPorUnidadyMateria1)", e, null);        }    }    public ResultadoEJB<List<DtoCalificacionEstudiante.CalificacionesNivelacionPorMateria>> packPromedioNivelacionPorMateria(Estudiante matricula){        try{            List<DtoCalificacionEstudiante.PromediosNivelacionesPorMateria> pnpm = new ArrayList<>();            List<DtoCalificacionEstudiante.PromediosNivelacionesPorMateria> pnpm1;            List<DtoCalificacionEstudiante.CalificacionesNivelacionPorMateria> cnpm = new ArrayList<>();            List<DtoCalificacionEstudiante.DtoCargaAcademica> ca = obtenerListaCargasAcademica(matricula).getValor();            ca.stream().filter(a -> a.getCarga().getCveGrupo().getIdGrupo().equals(matricula.getGrupo().getIdGrupo())).forEach(z -> {                if(z.getCarga().getCalificacionNivelacionList().stream().filter(a -> a.getEstudiante().getIdEstudiante().equals(matricula.getIdEstudiante())).collect(Collectors.toList()).isEmpty()){                    cnpm.add(new DtoCalificacionEstudiante.CalificacionesNivelacionPorMateria(z.getCarga().getIdPlanMateria().getIdMateria().getIdMateria(), z.getCarga().getIdPlanMateria().getIdMateria(), BigDecimal.ZERO));//                    System.out.println(cnpm);                }else{                    z.getCarga().getCalificacionNivelacionList().stream().filter(a -> a.getEstudiante().getIdEstudiante().equals(matricula.getIdEstudiante())).forEach(y -> {                        if(z.getCarga().getCalificacionNivelacionList().contains(z.getCarga())){                            cnpm.add(new DtoCalificacionEstudiante.CalificacionesNivelacionPorMateria(                                    z.getCarga().getIdPlanMateria().getIdMateria().getIdMateria(), z.getCarga().getIdPlanMateria().getIdMateria(), BigDecimal.ZERO                            ));                        }else{                            cnpm.add(new DtoCalificacionEstudiante.CalificacionesNivelacionPorMateria(                                    y.getCargaAcademica().getIdPlanMateria().getIdMateria().getIdMateria(), y.getCargaAcademica().getIdPlanMateria().getIdMateria(), new BigDecimal(y.getValor())                            ));                        }                    });                }            });            return ResultadoEJB.crearCorrecto(cnpm, "Se empaquetaron las materias por estudiante seleccionado");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packCalificacionesPorUnidadyMateria1)", e, null);        }    }    public ResultadoEJB<List<DtoCalificacionEstudiante.CalificacionePorMateria>> packPromedioMateria(Estudiante matricula){        try {            List<DtoCalificacionEstudiante.CalificacionePorMateria> cpm, cpm1;            List<DtoCalificacionEstudiante.CalificacionePorMateria> cpmFiltro = new ArrayList<>();            List<DtoCalificacionEstudiante.CalificacionePorMateria> cpmFiltro1 = new ArrayList<>();            ResultadoEJB<List<DtoCalificacionEstudiante.CalificacionePorUnidad>> resultadoEJB = packCalificacionesPorUnidadyMateria1(matricula);            List<DtoCalificacionEstudiante.CalificacionePorUnidad> cpu = resultadoEJB.getValor();            List<DtoCalificacionEstudiante.TareaIntegradoraPorMateria> tipm = packTareaIntegradora(matricula).getValor();            cpu.forEach(x -> {                BigDecimal porcentaje = new BigDecimal(x.getConfiguracion().getPorcentaje());                BigDecimal promedioU = x.getPromedioUnidad();                BigDecimal promedio = porcentaje.divide(new BigDecimal(100)).multiply(promedioU);                cpmFiltro.add(new DtoCalificacionEstudiante.CalificacionePorMateria(x.getEstudiante().getGrupo(), x.getMateria(), promedio));            });            cpm1 = cpmFiltro;            cpmFiltro.forEach(x -> {                Double sumaPorcentaje = tipm.stream().filter(a -> x.getMateria().getIdMateria().equals(a.getMateria().getIdMateria()) && x.getGrupo().getIdGrupo().equals(a.getGrupo().getIdGrupo())).mapToDouble(b -> b.getTareaIntegradoraPromedio().getTareaIntegradora().getPorcentaje()).sum();                BigDecimal porcentaje = BigDecimal.valueOf(sumaPorcentaje);                Double sumaPromedio = tipm.stream().filter(a -> x.getMateria().getIdMateria().equals(a.getMateria().getIdMateria()) && x.getGrupo().getIdGrupo().equals(a.getGrupo().getIdGrupo())).mapToDouble(b -> b.getTareaIntegradoraPromedio().getValor()).sum();                BigDecimal promedio = BigDecimal.valueOf(sumaPromedio);                BigDecimal promedioTI = porcentaje.divide(new BigDecimal(100), RoundingMode.HALF_UP).multiply(promedio);                BigDecimal sumaPromedioMateria = cpm1.stream().filter(a -> a.getMateria().getIdMateria()                        .equals(x.getMateria().getIdMateria())).map(DtoCalificacionEstudiante.CalificacionePorMateria::getPromedio).reduce(BigDecimal.ZERO, BigDecimal::add).add(promedioTI);                cpmFiltro1.add(new DtoCalificacionEstudiante.CalificacionePorMateria(x.getGrupo(), x.getMateria(), sumaPromedioMateria));            });            cpm = new ArrayList<>(new HashSet<>(cpmFiltro1));            return ResultadoEJB.crearCorrecto(cpm, "Lista completa de periodos");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packCalificacionesPorUnidadyMateria1)", e, null);        }    }    public ResultadoEJB<List<DtoCalificacionEstudiante.CalificacionePorMateria>> packCalificacionesFinales(Estudiante matricula){        try{            List<DtoCalificacionEstudiante.CalificacionePorMateria> cpm = new ArrayList<>();            List<DtoCalificacionEstudiante.CalificacionePorMateria> resultadosCPM = packPromedioMateria(matricula).getValor();            List<DtoCalificacionEstudiante.CalificacionesNivelacionPorMateria> resultadosPNPM = packPromedioNivelacionPorMateria(matricula).getValor();            resultadosCPM.forEach(x -> {                resultadosPNPM.stream().filter(a -> a.getIdMateria().equals(x.getMateria().getIdMateria())).forEach(y -> {                    if(y.getPromedio().compareTo(BigDecimal.valueOf(0)) == 0){                        cpm.add(new DtoCalificacionEstudiante.CalificacionePorMateria(x.getGrupo(), x.getMateria(), x.getPromedio()));                    }else{                        cpm.add(new DtoCalificacionEstudiante.CalificacionePorMateria(x.getGrupo(), x.getMateria(), y.getPromedio()));                    }                });            });            return ResultadoEJB.crearCorrecto(cpm, "Lista completa de periodos");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packCalificacionesPorUnidadyMateria1)", e, null);        }    }    public ResultadoEJB<BigDecimal> obtenerPromedioCuatrimestral(Estudiante matricula, Integer periodo){        try{            List<DtoCalificacionEstudiante.CalificacionePorMateria> cpm = packCalificacionesFinales(matricula).getValor().stream().filter(a -> a.getGrupo().getPeriodo() == periodo).collect(Collectors.toList());            BigDecimal promedioCuatrimestral = cpm.stream().map(DtoCalificacionEstudiante.CalificacionePorMateria::getPromedio).reduce(BigDecimal.ZERO, BigDecimal::add);            return ResultadoEJB.crearCorrecto(promedioCuatrimestral.setScale(2, RoundingMode.HALF_UP), "Lista completa de periodos");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packCalificacionesPorUnidadyMateria1)", e, null);        }    }    public ResultadoEJB<List<BigDecimal>> obtenerPromedioAcumulado(Estudiante matricula){        try{            List<BigDecimal> promediosAcumulados = new ArrayList<>();            List<DtoCalificacionEstudiante.DtoPeriodosEscolares> periodos = obtenerListaPeriodosEscolares()                    .getValor()                    .stream()                    .filter(a -> a.getPeriodo() <= getPeriodoActual().getPeriodo())                    .map(this::packPeriodosEscolares)                    .filter(ResultadoEJB::getCorrecto).map(ResultadoEJB::getValor).collect(Collectors.toList());            periodos.forEach(x -> {                BigDecimal totalMaterias = new BigDecimal(packMaterias(matricula).getValor().stream().filter(b -> b.getGrupo().getPeriodo() == x.getPeriodosEscolares().getPeriodo()).count());                BigDecimal promedioAcumulado = packCalificacionesFinales(matricula).getValor().stream().filter(a -> a.getGrupo().getPeriodo() == x.getPeriodosEscolares().getPeriodo())                        .map(DtoCalificacionEstudiante.CalificacionePorMateria::getPromedio).reduce(BigDecimal.ZERO, BigDecimal::add);                BigDecimal promedio = promedioAcumulado.divide(totalMaterias, RoundingMode.HALF_UP);                promediosAcumulados.add(promedio.setScale(2, RoundingMode.HALF_UP));            });            return ResultadoEJB.crearCorrecto(promediosAcumulados, "Lista completa de periodos");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packCalificacionesPorUnidadyMateria1)", e, null);        }    }    public ResultadoEJB<Personal> obtenerDirector(PlanEstudio planEstudio){        //System.out.println("Plan estudio"+ planEstudio);        AreasUniversidad areaSuperior = em.createQuery("select a from AreasUniversidad as a where a.area = :plan", AreasUniversidad.class)                .setParameter("plan", planEstudio.getIdPe()).getResultStream().findFirst().orElse(null);        AreasUniversidad director = em.createQuery("select a from AreasUniversidad as a where a.area = :areaSuperior", AreasUniversidad.class)                .setParameter("areaSuperior", Objects.requireNonNull(areaSuperior).getAreaSuperior()).getResultStream().findFirst().orElse(null);        Personal responsable = em.createQuery("select p from Personal as p where p.clave = :director", Personal.class)                .setParameter("director", director != null ? director.getResponsable() : null)                .getResultStream().findFirst().orElse(null);        return ResultadoEJB.crearCorrecto(responsable, "");    }    public ResultadoEJB<DtoCalificacionEstudiante.DtoCargaAcademica> packCargaAcademica(CargaAcademica carga){        try{            CargaAcademica cargaAcademica = em.find(CargaAcademica.class, carga.getCarga());            DtoCalificacionEstudiante.DtoCargaAcademica dto = new DtoCalificacionEstudiante.DtoCargaAcademica(cargaAcademica);//            System.out.println("detalle = " + detalle);            return ResultadoEJB.crearCorrecto(dto, "Carga Académica");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo empaquetar el detalle de la configuración de unidad (EjbPacker.packDtoUnidadConfiguracionDetalle)", DtoCalificacionEstudiante.DtoCargaAcademica.class);        }    }    public ResultadoEJB<DtoCalificacionEstudiante.DtoPeriodosEscolares> packPeriodosEscolares(PeriodosEscolares periodo){        try{            PeriodosEscolares periodosEscolares = em.find(PeriodosEscolares.class, periodo.getPeriodo());            DtoCalificacionEstudiante.DtoPeriodosEscolares dto = new DtoCalificacionEstudiante.DtoPeriodosEscolares(periodosEscolares);//            System.out.println("detalle = " + detalle);            return ResultadoEJB.crearCorrecto(dto, "Carga Académica");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo empaquetar el detalle de la configuración de unidad (EjbPacker.packDtoUnidadConfiguracionDetalle)", DtoCalificacionEstudiante.DtoPeriodosEscolares.class);        }    }    public ResultadoEJB<List<DtoCargaAcademica>> obtenerCargasAcademicas(Estudiante estudiante){        try {            //obtener la lista de cargas académicas del estudiante            List<DtoCargaAcademica> cargas = em.createQuery("select ca from CargaAcademica ca where ca.cveGrupo.idGrupo = :grupo and ca.cveGrupo.periodo = :periodo order by ca.idPlanMateria.claveMateria asc", CargaAcademica.class)                    .setParameter("grupo", estudiante.getGrupo().getIdGrupo())                    .setParameter("periodo", estudiante.getPeriodo())                    .getResultStream()                    .distinct()                    .map(cargaAcademica -> ejbAsignacionAcademica.pack(cargaAcademica))                    .filter(res -> res.getCorrecto())                    .map(ResultadoEJB::getValor)                    .sorted(DtoCargaAcademica::compareTo)                    .collect(Collectors.toList());            if(cargas.isEmpty()) return  ResultadoEJB.crearErroneo(2, cargas, "Usted no tiene carga académica en el periodo seleccionado");            else return ResultadoEJB.crearCorrecto(cargas, "Cargas académicas por docente y periodo");        }catch (Exception e){            return  ResultadoEJB.crearErroneo(1, "No se pudo obtener la lista cargas cadémicas por docente y periodo (EjbCapturaCalificaciones.getCargasAcadémicasPorPeriodo).", e, null);        }    }    public ResultadoEJB<List<DtoCalificacionEstudiante.UnidadesPorMateria>> packUnidadesmateria(Estudiante matricula){        try {            List<DtoCalificacionEstudiante.UnidadesPorMateria> dto = em.createQuery(                    "select distinct c from CargaAcademica as c " +                    "inner join PlanEstudioMateria as p on c.idPlanMateria.idPlanMateria = p.idPlanMateria " +                    "inner join Materia as m on p.idMateria.idMateria = m.idMateria " +                    "inner join UnidadMateria as u on u.idMateria.idMateria = m.idMateria " +                    "where c.cveGrupo.idGrupo = :cveGrupo " +                    "group by u.noUnidad, c.cveGrupo.idGrupo " +                    "order by c.cveGrupo.idGrupo desc", CargaAcademica.class)                    .setParameter("cveGrupo", matricula.getGrupo().getIdGrupo())                    .getResultStream()                    .map(cargaAcademica -> mapUnidades(cargaAcademica))                    .filter(ResultadoEJB::getCorrecto)                    .map(ResultadoEJB::getValor)                    .collect(Collectors.toList());            return ResultadoEJB.crearCorrecto(dto, "Se empaquetaron las materias por estudiante seleccionado");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packUnidadesmateria)", e, null);        }    }    public ResultadoEJB<DtoCalificacionEstudiante.UnidadesPorMateria> mapUnidades(CargaAcademica cargaAcademica){        CargaAcademica cargaAcademicaBD = em.find(CargaAcademica.class, cargaAcademica.getCarga());        PlanEstudioMateria planEstudioMateria = em.find(PlanEstudioMateria.class, cargaAcademica.getIdPlanMateria().getIdPlanMateria());        Materia materia = em.find(Materia.class, planEstudioMateria.getIdMateria().getIdMateria());        List<UnidadMateria> unidadMaterias = em.createQuery("select u from UnidadMateria as u where u.idMateria.idMateria = :idMateria group by u.noUnidad", UnidadMateria.class)                .setParameter("idMateria", materia.getIdMateria())                .getResultStream().collect(Collectors.toList());        DtoCalificacionEstudiante.UnidadesPorMateria dto = new DtoCalificacionEstudiante.UnidadesPorMateria(cargaAcademicaBD, unidadMaterias);        return ResultadoEJB.crearCorrecto(dto, "");    }    public ResultadoEJB<DtoUnidadesCalificacionEstudiante> packDtoUnidadesCalificacion(Estudiante estudiante, DtoCargaAcademica dtoCargaAcademica, List<DtoUnidadConfiguracion> dtoUnidadConfiguraciones){        try{            DtoUnidadesCalificacionEstudiante dtoUnidadesCalificacionEstudiante = new DtoUnidadesCalificacionEstudiante(estudiante, dtoCargaAcademica, dtoUnidadConfiguraciones);            //System.out.println("Unidades Calificacion:"+ dtoUnidadesCalificacionEstudiante);                    dtoUnidadConfiguraciones.forEach(dtoUnidadConfiguracion -> {                        ResultadoEJB<DtoCapturaCalificacionEstudiante> dtoCapturaCalificacionResultadoEJB = packCapturaCalificacion(estudiante, dtoUnidadConfiguracion.getDtoCargaAcademica(), dtoUnidadConfiguracion);                        //System.out.println(dtoCapturaCalificacionResultadoEJB.getValor());                        if(dtoCapturaCalificacionResultadoEJB.getCorrecto()){                            try {                                dtoUnidadesCalificacionEstudiante.agregarCapturaCalificacion(dtoUnidadConfiguracion.getDtoCargaAcademica(), dtoUnidadConfiguracion, dtoCapturaCalificacionResultadoEJB.getValor());                                //System.out.println(dtoUnidadesCalificacionEstudiante);                            } catch (Exception e) {                                e.printStackTrace();                            }                        }                    });                return ResultadoEJB.crearCorrecto(dtoUnidadesCalificacionEstudiante, "Empaqueta de calificaciones por unidad de un grupo.");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo empaquetas las calificaciones de todas la unidades de una materia(EjbPacker.packCapturaCalificacion).", e, DtoUnidadesCalificacionEstudiante.class);        }    }    public ResultadoEJB<DtoCapturaCalificacionEstudiante> packCapturaCalificacion(Estudiante estudiante, DtoCargaAcademica dtoCargaAcademica, DtoUnidadConfiguracion dtoUnidadConfiguracion){        try{            //empaquetar captura de calificacion            List<DtoCapturaCalificacionEstudiante.Captura> capturas = dtoUnidadConfiguracion.getUnidadMateriaConfiguracionDetalles()                    .values()                    .stream()                    .flatMap(detalles -> detalles.stream())                    .map(detalle -> packDtoCapturaCalificacionCaptura(detalle, estudiante))                    .filter(ResultadoEJB::getCorrecto)                    .map(ResultadoEJB::getValor)                    .collect(Collectors.toList());            DtoCapturaCalificacionEstudiante dtoCapturaCalificacion = new DtoCapturaCalificacionEstudiante(estudiante, dtoCargaAcademica, dtoUnidadConfiguracion, capturas);            ResultadoEJB<BigDecimal> resPromedio = promediarUnidad(dtoCapturaCalificacion);            if(resPromedio.getCorrecto()) {                dtoCapturaCalificacion.setPromedio(resPromedio.getValor());                ResultadoEJB<Boolean> validarPromedioAprobatorio = ejbCapturaCalificaciones.validarPromedioAprobatorio(dtoCapturaCalificacion.getPromedio());                if(validarPromedioAprobatorio.getCorrecto()){                    dtoCapturaCalificacion.setEstaAprobado(validarPromedioAprobatorio.getValor());                    UnidadMateriaComentario unidadMateriaComentario = em.createQuery("select c from UnidadMateriaComentario c where c.estudiante=:estudiante and c.unidadMateriaConfiguracion=:configuracion", UnidadMateriaComentario.class)                            .setParameter("estudiante", estudiante)                            .setParameter("configuracion", dtoUnidadConfiguracion.getUnidadMateriaConfiguracion())                            .getResultStream()                            .findFirst()                            .orElse(null);                    dtoCapturaCalificacion.setTieneComentarioReprobatorio(unidadMateriaComentario != null);                    if(dtoCapturaCalificacion.getTieneComentarioReprobatorio()) dtoCapturaCalificacion.setComentarioReprobatorio(unidadMateriaComentario);                    //ResultadoEJB<Boolean> eliminarComentarioReprobatorio = ejbValidacionComentarios.eliminarComentarioReprobatorio(dtoCapturaCalificacion);//intenta eliminar el comentario si es que no es necesario//                    System.out.println("eliminarComentarioReprobatorio = " + eliminarComentarioReprobatorio);                }else validarPromedioAprobatorio.getException().printStackTrace();            }else resPromedio.getException().printStackTrace();            /*ResultadoEJB<Boolean> cargarCasosCriticos = ejbCasoCritico.cargarCasosCriticos(dtoCapturaCalificacion);            if(!cargarCasosCriticos.getCorrecto()) cargarCasosCriticos.getException().printStackTrace();*/            return ResultadoEJB.crearCorrecto(dtoCapturaCalificacion, "Captura de calificación empaquetada");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo empaquetar la captura de calificaciones a partir del empaquetado de estudiante y carga academica(EjbPacker.packCapturaCalificacion).", e, DtoCapturaCalificacionEstudiante.class);        }    }    public ResultadoEJB<DtoCapturaCalificacionEstudiante.Captura> packDtoCapturaCalificacionCaptura(DtoUnidadConfiguracion.Detalle detalle, Estudiante dtoEstudiante){        try{//            System.out.println("detalle = [" + detalle + "], dtoEstudiante = [" + dtoEstudiante + "]");            Calificacion calificacion = em.createQuery("select c from Calificacion  c where c.idEstudiante.idEstudiante=:estudiante and c.configuracionDetalle=:detalle", Calificacion.class)                    .setParameter("estudiante", dtoEstudiante.getIdEstudiante())                    .setParameter("detalle", detalle.getDetalle())                    .getResultStream()                    .findFirst()                    .orElse(null);            if(calificacion == null){//si no existe calificación se crea con valor nulo                calificacion = new Calificacion();                calificacion.setConfiguracionDetalle(detalle.getDetalle());                calificacion.setIdEstudiante(dtoEstudiante);                calificacion.setValor(null);                //em.persist(calificacion);            }            DtoCapturaCalificacionEstudiante.Captura captura = new DtoCapturaCalificacionEstudiante.Captura(detalle, calificacion);//            System.out.println("captura = " + captura);            return ResultadoEJB.crearCorrecto(captura, "Captura de calificación");        }catch (Exception e){            e.printStackTrace();            return ResultadoEJB.crearErroneo(1, "No se pudo empaquetar la captura de calificación (EjbPacker.packDtoCapturaCalificacionCaptura).", DtoCapturaCalificacionEstudiante.Captura.class);        }    }    public ResultadoEJB<BigDecimal> promediarUnidad(DtoCapturaCalificacionEstudiante dtoCapturaCalificacion){        try{//            System.out.println("EjbCapturaCalificaciones.promediarUnidad");            if(dtoCapturaCalificacion == null) return ResultadoEJB.crearErroneo(2, "El DTO de captura de calificación es nulo", BigDecimal.class);            if(dtoCapturaCalificacion.getCapturas() == null) return  ResultadoEJB.crearErroneo(3, "La lista de capturas de calificaciones es nula.", BigDecimal.class);            List<Criterio> criterios = dtoCapturaCalificacion.getCapturas()                    .stream()                    .map(captura -> captura.getDetalle().getCriterio())                    .distinct()                    .sorted(Comparator.comparingInt(Criterio::getCriterio))                    .collect(Collectors.toList());            BigDecimal suma = criterios                    .stream()                    .map(criterio -> promediarCriterio(dtoCapturaCalificacion.getCapturas(), criterio))                    .filter(ResultadoEJB::getCorrecto)                    .map(ResultadoEJB::getValor)                    .reduce(BigDecimal.ZERO, BigDecimal::add);//            System.out.println("promedioUnidad = " + suma);            return ResultadoEJB.crearCorrecto(suma, "Promedio calculado");        }catch (Exception e){//            e.printStackTrace();            return ResultadoEJB.crearErroneo(1, "No se pudo promediar la unidad (EjbCapturaCalificaciones.promediarUnidad).", e, BigDecimal.class);        }    }    public ResultadoEJB<BigDecimal> promediarCriterio(List<DtoCapturaCalificacionEstudiante.Captura> capturas, Criterio criterio){        try{//            System.out.println("EjbCapturaCalificaciones.promediarCriterio");//            System.out.println("criterio.getTipo() = " + criterio.getTipo());            BigDecimal suma = capturas                    .stream()                    .filter(captura -> Objects.equals(captura.getDetalle().getCriterio(), criterio))                    .map(captura -> calificarCaptura(captura))                    .filter(ResultadoEJB::getCorrecto)                    .map(ResultadoEJB::getValor)                    .reduce(BigDecimal.ZERO, BigDecimal::add);//            System.out.println("suma = " + suma);            BigDecimal porcentajeRecomendado = new BigDecimal(criterio.getPorcentajeRecomendado());//            System.out.println("porcentajeRecomendado = " + porcentajeRecomendado);            BigDecimal valor = porcentajeRecomendado.divide(new BigDecimal(100)).multiply(suma);//            System.out.println("calificacionCriterio = " + valor);            return ResultadoEJB.crearCorrecto(valor, "Promedio por criterio calculado");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "", e, BigDecimal.class);        }    }    public ResultadoEJB<BigDecimal> calificarCaptura(DtoCapturaCalificacionEstudiante.Captura captura){        try{//            System.out.println("EjbCapturaCalificaciones.calificarCaptura");            BigDecimal porcentajeDetalle = new BigDecimal(captura.getDetalle().getDetalle().getPorcentaje());//            System.out.println("porcentajeDetalle = " + porcentajeDetalle);            BigDecimal valorCalificacion = new BigDecimal(captura.getCalificacion().getValor());//            System.out.println("valorCalificacion = " + valorCalificacion);            BigDecimal valor = porcentajeDetalle.divide(new BigDecimal(100)).multiply(valorCalificacion); //porcentajeDetalle / 100d * valorCalificacion;//            System.out.println("valor = " + valor);            return ResultadoEJB.crearCorrecto(valor, "Valor de captura de calificación por detalle, criterio y estudiante, calculado.");        }catch (Exception e){//            e.printStackTrace();            return ResultadoEJB.crearErroneo(1, "No se pudo calificar la captura (EjbCapturaCalificaciones.calificarCaptura).", BigDecimal.class);        }    }    public ResultadoEJB<Map<DtoCargaAcademica, TareaIntegradoraPromedio>> generarContenedorCalificaciones(DtoCargaAcademica dtoCargaAcademicas, Estudiante estudiante, TareaIntegradora tareaIntegradora){        try{            Map<DtoCargaAcademica, TareaIntegradoraPromedio> map = new HashMap<>();            List<TareaIntegradoraPromedio> tareaIntegradoraPromedios = em.createQuery("select tip from TareaIntegradoraPromedio tip where tip.tareaIntegradora=:tareaIntegradora", TareaIntegradoraPromedio.class)                    .setParameter("tareaIntegradora", tareaIntegradora)                    .getResultList();//            System.out.println("tareaIntegradoraPromedios = " + tareaIntegradoraPromedios);                TareaIntegradoraPromedioPK pk = new TareaIntegradoraPromedioPK(tareaIntegradora.getIdTareaIntegradora(), estudiante.getIdEstudiante());//                System.out.println("pk = " + pk);                TareaIntegradoraPromedio tareaIntegradoraPromedio = new TareaIntegradoraPromedio(pk);//                System.out.println("tareaIntegradoraPromedio = " + tareaIntegradoraPromedio);//                System.out.println("!tareaIntegradoraPromedios.contains(tareaIntegradoraPromedio) = " + !tareaIntegradoraPromedios.contains(tareaIntegradoraPromedio));                if(!tareaIntegradoraPromedios.contains(tareaIntegradoraPromedio)){                }else tareaIntegradoraPromedio = tareaIntegradoraPromedios.get(tareaIntegradoraPromedios.indexOf(tareaIntegradoraPromedio));                map.put(dtoCargaAcademicas, tareaIntegradoraPromedio);            return ResultadoEJB.crearCorrecto(map, "Contenedor de calificaciones para tarea integradora");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo construir el contenedor de calificaciones para tarea integradora (EjbCapturaTareaIntegradora.generarContenedorCalificaciones).", e, null);        }    }    public ResultadoEJB<BigDecimal> promediarAsignatura(DtoUnidadesCalificacionEstudiante dtoUnidadesCalificacion, DtoCargaAcademica dtoCargaAcademica, Estudiante estudiante){        try{            //            BigDecimal suma = dtoUnidadesCalificacion.getCalificacionMap().entrySet().stream()                    .map(entrada -> entrada.getValue())                    .filter(dtoCapturaCalificacion -> Objects.equals(dtoCapturaCalificacion.getDtoCargaAcademica().getCargaAcademica().getCarga(), dtoCargaAcademica.getCargaAcademica().getCarga()))                    .filter(dtoCapturaCalificacion -> Objects.equals(dtoCapturaCalificacion.getEstudiante().getIdEstudiante(), estudiante.getIdEstudiante()))                    .map(dtoCapturaCalificacion -> {                        BigDecimal porcentaje = new BigDecimal(dtoCapturaCalificacion.getDtoUnidadConfiguracion().getUnidadMateriaConfiguracion().getPorcentaje());                        BigDecimal promedio = dtoCapturaCalificacion.getPromedio();                        return promedio.multiply(porcentaje).divide(new BigDecimal(100));                    })                    .reduce(BigDecimal.ZERO, BigDecimal::add);            //System.out.println("Suma de las calificaciones de las materias sin tarea integradora:"+ suma);            ResultadoEJB<TareaIntegradora> tareaIntegradoraResultadoEJB = verificarTareaIntegradora(dtoCargaAcademica);            if(tareaIntegradoraResultadoEJB.getCorrecto()){                TareaIntegradora tareaIntegradora = tareaIntegradoraResultadoEJB.getValor();                TareaIntegradoraPromedioPK pk = new TareaIntegradoraPromedioPK(tareaIntegradora.getIdTareaIntegradora(), estudiante.getIdEstudiante());                TareaIntegradoraPromedio tareaIntegradoraPromedio = em.createQuery("select tip from TareaIntegradoraPromedio tip where tip.tareaIntegradoraPromedioPK=:pk", TareaIntegradoraPromedio.class)                        .setParameter("pk", pk)                        .getResultStream()                        .findFirst().orElse(null);                if(tareaIntegradoraPromedio != null) {                    BigDecimal calificacion = new BigDecimal(tareaIntegradoraPromedio.getValor()).setScale(2, RoundingMode.HALF_UP);                    BigDecimal porcentaje = new BigDecimal(tareaIntegradora.getPorcentaje()).setScale(2, RoundingMode.HALF_UP);                    //System.out.println("Promedio de la tarea integradora:"+ calificacion.multiply(porcentaje).divide(new BigDecimal(100), RoundingMode.HALF_UP).setScale(2, RoundingMode.HALF_UP));                    suma = suma.add(calificacion.multiply(porcentaje).divide(new BigDecimal(100), RoundingMode.HALF_UP));                }            }            if(!tareaIntegradoraResultadoEJB.getCorrecto() && tareaIntegradoraResultadoEJB.getResultado() != 2) return ResultadoEJB.crearErroneo(2, tareaIntegradoraResultadoEJB.getMensaje(), BigDecimal.class);            return ResultadoEJB.crearCorrecto(suma, "Promedio por materia");        }catch (Exception e){            return  ResultadoEJB.crearErroneo(1, "No se pudo calcular el promedio de la asignatura (EjbCapturaTareaIntegradora.promediarAsignatura).", e, BigDecimal.class);        }    }    public ResultadoEJB<DtoCalificacionNivelacion> packDtoCalificacionNivelacion(DtoCargaAcademica dtoCargaAcademica, Estudiante estudiante){        try{            CalificacionNivelacionPK pk = new CalificacionNivelacionPK(dtoCargaAcademica.getCargaAcademica().getCarga(), estudiante.getIdEstudiante());            CalificacionNivelacion calificacionNivelacion = em.find(CalificacionNivelacion.class, pk);            if(calificacionNivelacion == null){                calificacionNivelacion = new CalificacionNivelacion(pk);                calificacionNivelacion.setEstudiante(estudiante);                calificacionNivelacion.setCargaAcademica(dtoCargaAcademica.getCargaAcademica());                calificacionNivelacion.setIndicador(new Indicador());                calificacionNivelacion.setValor(0d);            }            DtoCalificacionNivelacion dtoCalificacionNivelacion = new DtoCalificacionNivelacion(calificacionNivelacion, new Indicador());            return ResultadoEJB.crearCorrecto(dtoCalificacionNivelacion, "Empaquetado de nivelación.");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo empaquetar la calificación de nivelación (EjbPacker.packDtoCalificacionNivelacion).", e, DtoCalificacionNivelacion.class);        }    }    public ResultadoEJB<List<DtoEstudiante>> obtenerRegistrosEstudiante(DtoEstudiante estudiante){        try {            List<DtoEstudiante> estudiantes = em                    .createQuery("select e from Estudiante as e where e.matricula = :matricula order by e.idEstudiante desc", Estudiante.class)                    .setParameter("matricula", estudiante.getInscripcionActiva().getInscripcion().getMatricula())                    .getResultStream()                    .map(estudiante1 -> ejbPacker.packEstudiante(estudiante1))                    .filter(ResultadoEJB::getCorrecto)                    .map(ResultadoEJB::getValor)                    .collect(Collectors.toList());            return ResultadoEJB.crearCorrecto(estudiantes ,"");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packUnidadesmateria)", e, null);        }    }    public ResultadoEJB<AreasUniversidad> obtenerProgramaEducativo(Short carrera){        return ResultadoEJB.crearCorrecto(em.createQuery("select a from AreasUniversidad a where a.area = :area", AreasUniversidad.class)                .setParameter("area",carrera).getResultStream().findFirst().orElse(null), "");    }    public ResultadoEJB<List<DtoEstudiante>> obtenerEstudiantes(){        try{            List<DtoEstudiante> estudiantes = em                    .createQuery("select e from Estudiante e where e.periodo = :periodo and e.tipoEstudiante.idTipoEstudiante = :tipoEstudiante", Estudiante.class)                    .setParameter("periodo", getPeriodoActual().getPeriodo())                    .setParameter("tipoEstudiante", Short.parseShort("1"))                    .getResultStream()                    .map(estudiante -> ejbPacker.packEstudiante(estudiante.getMatricula()))                    .filter(ResultadoEJB::getCorrecto)                    .map(ResultadoEJB::getValor)                    .collect(Collectors.toList());            //System.out.println("Tamaño:"+estudiantes.size());            return ResultadoEJB.crearCorrecto(estudiantes, "");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packUnidadesmateria)", e, null);        }    }    public ResultadoEJB<List<DtoEstudiante>> obtenerEstudiantesPeriodoCursado(DtoEstudiante estudiante) {        List<DtoEstudiante> estudiantes = em.createQuery("select e from Estudiante e where e.matricula = :matricula", Estudiante.class)                .setParameter("matricula", estudiante.getInscripcionActiva().getInscripcion().getMatricula())                .getResultStream()                .map(estudiante1 -> ejbPacker.packEstudiante(estudiante1))                .filter(ResultadoEJB::getCorrecto)                .map(ResultadoEJB::getValor)                .collect(Collectors.toList());//        System.out.println("Estudiante:"+estudiantes);        return ResultadoEJB.crearCorrecto(estudiantes, "Registros encontrados con éxito");    }    public ResultadoEJB<CalificacionPromedio> obtenerPromedioEstudiante(CargaAcademica cargaAcademica, Estudiante estudiante){        CalificacionPromedio cp = em.createQuery("select c from CalificacionPromedio c where c.cargaAcademica.carga = :carga and c.estudiante.idEstudiante = :estudiante", CalificacionPromedio.class)                .setParameter("carga", cargaAcademica.getCarga())                .setParameter("estudiante", estudiante.getIdEstudiante())                .getResultStream().findFirst().orElse(new CalificacionPromedio());        return ResultadoEJB.crearCorrecto(cp, "Se obtuvo la lista completa de promedios del estudiante");    }    public ResultadoEJB<List<CalificacionPromedio>> obtenerPromedioEstudiante(DtoInscripcion estudiante){        List<CalificacionPromedio> cp = em.createQuery("select c from CalificacionPromedio c where c.estudiante.idEstudiante = :estudiante", CalificacionPromedio.class)                .setParameter("estudiante", estudiante.getInscripcion().getIdEstudiante())                .getResultStream().collect(Collectors.toList());        return ResultadoEJB.crearCorrecto(cp, "Se obtuvo la lista completa de promedios del estudiante");    }    public ResultadoEJB<CalificacionNivelacion> obtenerPromedioNivelacion(CargaAcademica cargaAcademica, Estudiante estudiante){        CalificacionNivelacion cn = em.createQuery("select c from CalificacionNivelacion as c where c.cargaAcademica.carga = :carga and c.estudiante.idEstudiante = :estudiante", CalificacionNivelacion.class)                .setParameter("carga", cargaAcademica.getCarga())                .setParameter("estudiante", estudiante.getIdEstudiante())                .getResultStream().findFirst().orElse(new CalificacionNivelacion());        return ResultadoEJB.crearCorrecto(cn, "Se obtuvo una calificacion de nivelacion");    }    public ResultadoEJB<List<AreasUniversidad>> obtenerProgramasEducativos(){        List<AreasUniversidad> au = em.createQuery("select a from AreasUniversidad as a " +                "where a.categoria.categoria = :categoria " +                "and a.vigente = :vigente " +                "order by a.nivelEducativo.nivel desc", AreasUniversidad.class)                .setParameter("categoria", Short.parseShort("9"))                .setParameter("vigente", "1")                .getResultStream().collect(Collectors.toList());        return ResultadoEJB.crearCorrecto(au, "");    }    public ResultadoEJB<TareaIntegradora> verificarTareaIntegradora(DtoCargaAcademica dtoCargaAcademica){        try{            TareaIntegradora tareaIntegradora = em.createQuery("select ti from TareaIntegradora ti where ti.carga.carga=:carga", TareaIntegradora.class)                    .setParameter("carga", dtoCargaAcademica.getCargaAcademica().getCarga())                    .getResultStream()                    .findFirst().orElse(null);            if(tareaIntegradora == null) return ResultadoEJB.crearErroneo(2, "La carga académica no tiene tarea integradora asignada.", TareaIntegradora.class);            return ResultadoEJB.crearCorrecto(tareaIntegradora, "La carga académica tiene tarea integradora");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo verificar si la carga académica tiene tarea integradora (EjbCapturaTareaIntegradora.verificarTareaIntegradora).", e, TareaIntegradora.class);        }    }    public ResultadoEJB<Filter<PersonalActivo>> validarCoordinador(Integer clave){        Integer clavePersona = Objects.requireNonNull(em.createQuery("select c from ConfiguracionPropiedades c where c.tipo = :tipo and c.clave like '%consulta%' and c.valorEntero = :clave", ConfiguracionPropiedades.class)                .setParameter("tipo", "Lista")                .setParameter("clave", clave)                .getResultStream()                .findFirst().orElse(new ConfiguracionPropiedades())).getValorEntero();        PersonalActivo p = ejbPersonalBean.pack(clavePersona);        Filter<PersonalActivo> filtro = new Filter<>();        filtro.setEntity(p);        return ResultadoEJB.crearCorrecto(filtro, "El filtro del usuario ha sido preparado como Coordinador.");    }}