package mx.edu.utxj.pye.sgi.ejb.controlEscolar;import mx.edu.utxj.pye.sgi.dto.ResultadoEJB;import mx.edu.utxj.pye.sgi.dto.controlEscolar.DtoCalificacionEstudiante;import mx.edu.utxj.pye.sgi.entity.ch.Personal;import mx.edu.utxj.pye.sgi.entity.controlEscolar.*;import mx.edu.utxj.pye.sgi.entity.prontuario.PeriodosEscolares;import mx.edu.utxj.pye.sgi.facade.Facade;import javax.annotation.PostConstruct;import javax.ejb.EJB;import javax.ejb.Stateless;import javax.persistence.EntityManager;import java.math.BigDecimal;import java.math.RoundingMode;import java.util.*;import java.util.stream.Collectors;@Statelesspublic class EjbConsultaCalificacion {    @EJB    Facade f;    private EntityManager em;    @PostConstruct    public void init(){        em = f.getEntityManager();    }    /**     * Permite validar si el usuario logueado es del tipo estudiante     * @param matricula     * @return Regresa la instancia del estudiante si este cumple con lo mencionado     */    public ResultadoEJB<Estudiante> validadEstudiante(Integer matricula){        try{            Estudiante e = em.createQuery("select e from Estudiante as e where e.matricula = :matricula", Estudiante.class).setParameter("matricula", matricula)                    .getResultStream().findFirst().orElse(new Estudiante());            return ResultadoEJB.crearCorrecto(e, "El usuario ha sido comprobado como estudiante.");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "El personal docente no se pudo validar. (EjbConsultaCalificacion.validadEstudiante)", e, null);        }    }    /**     * Permite obtener el periodo activo.     * @return Regresa la instancia del periodo activo     */    public ResultadoEJB<PeriodosEscolares> periodoActivo(){        try {            PeriodosEscolares periodo = em.createQuery("select p from PeriodosEscolares  as p order by p.periodo desc", PeriodosEscolares.class).getResultStream().findFirst().orElse(new PeriodosEscolares());            return ResultadoEJB.crearCorrecto(periodo, "Periodo activo");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.periodoActivo)", e, null);        }    }    /**     * Permite obtener las lista de periodos a partir del periodo 52     * @return Regresa la lista de periodos encontrados     */    public ResultadoEJB<List<PeriodosEscolares>> obtenerListaPeriodosEscolares(){        try {            List<PeriodosEscolares> pe = em.createQuery("select p from PeriodosEscolares as p where p.periodo >= :periodo", PeriodosEscolares.class)                    .setParameter("periodo", 52).getResultStream().collect(Collectors.toList());            return ResultadoEJB.crearCorrecto(pe, "Lista completa de periodos");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.obtenerListaPeriodosEscolares)", e, null);        }    }    public ResultadoEJB<List<DtoCalificacionEstudiante.MateriasPorEstudiante>> packMaterias(Estudiante matricula){        try {            List<DtoCalificacionEstudiante.MateriasPorEstudiante> materiasPorEstudiante = new ArrayList<>();            List<CargaAcademica> cargaAcademica = em.createQuery("select c from CargaAcademica as c where c.cveGrupo.idGrupo = :grupo", CargaAcademica.class)                    .setParameter("grupo", matricula.getGrupo().getIdGrupo()).getResultStream().collect(Collectors.toList());            cargaAcademica.forEach(x -> {                em.createQuery("select p from Personal as p where p.clave = :docente", Personal.class).setParameter("docente", x.getDocente()).getResultStream().collect(Collectors.toList())                        .forEach(z ->                                materiasPorEstudiante.add(new DtoCalificacionEstudiante.MateriasPorEstudiante(x.getCveGrupo().getPeriodo(), x.getCveGrupo(), x, x.getIdPlanMateria(),                                        x.getIdPlanMateria().getIdMateria(), z)));            });            return ResultadoEJB.crearCorrecto(materiasPorEstudiante, "Se empaquetaron las materias por estudiante seleccionado");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packMaterias)", e, null);        }    }    public ResultadoEJB<List<DtoCalificacionEstudiante.UnidadesPorMateria>> packUnidadesmateria(Estudiante matricula){        try {            List<DtoCalificacionEstudiante.UnidadesPorMateria> unidadesPorMateria = new ArrayList<>();            List<DtoCalificacionEstudiante.MateriasPorEstudiante> mpe = packMaterias(matricula).getValor();            mpe.forEach(x -> {                x.getMateria().getUnidadMateriaList().stream().filter(a -> a.getIdMateria().getIdMateria().equals(x.getMateria().getIdMateria())).forEach(y -> {                    y.getUnidadMateriaConfiguracionList().stream().filter(b -> b.getIdUnidadMateria().getIdUnidadMateria().equals(y.getIdUnidadMateria())).forEach(z -> {                        BigDecimal porcentaje = new BigDecimal(z.getPorcentaje()).divide(new BigDecimal(100));                        unidadesPorMateria.add(new DtoCalificacionEstudiante.UnidadesPorMateria(                                x.getGrupo(), x.getCargaAcademica(), x.getPlanEstudioMateria(), x.getMateria(), y, z, porcentaje, y.getNoUnidad()));                    });                });            });            return ResultadoEJB.crearCorrecto(unidadesPorMateria, "Se empaquetaron las materias por estudiante seleccionado");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packUnidadesmateria)", e, null);        }    }    public ResultadoEJB<List<DtoCalificacionEstudiante.CalificacionePorUnidad>> packCalificacionesPorUnidadyMateria1(Estudiante matricula){        try{            List<DtoCalificacionEstudiante.CalificacionesPorDetalle> cpd = new ArrayList<>();            List<DtoCalificacionEstudiante.CalificacionePorCriterio> cpc = new ArrayList<>();            List<DtoCalificacionEstudiante.CalificacionePorUnidad> cpu = new ArrayList<>();            List<DtoCalificacionEstudiante.CalificacionePorUnidad> cpuFiltro;            List<DtoCalificacionEstudiante.CalificacionesPorUnidadyMateria> cpum1 = new ArrayList<>();            List<DtoCalificacionEstudiante.CalificacionesPorUnidadyMateria> cpum = new ArrayList<>();            List<CargaAcademica> ca = em.createQuery("select c from CargaAcademica as c where c.cveGrupo.idGrupo = :grupo", CargaAcademica.class).setParameter("grupo", matricula.getGrupo().getIdGrupo())                    .getResultStream().collect(Collectors.toList());            ca.forEach(x -> {                x.getUnidadMateriaConfiguracionList().stream().filter(a -> a.getCarga().getCarga().equals(x.getCarga())).forEach(y -> {                    y.getUnidadMateriaConfiguracionDetalleList().stream().filter(b -> b.getConfiguracion().getConfiguracion().equals(y.getConfiguracion())).forEach(w -> {                        y.getUnidadMateriaConfiguracionCriterioList().stream().filter(d -> d.getCriterio1().getCriterio().equals(w.getCriterio().getCriterio()) && d.getUnidadMateriaConfiguracion().getConfiguracion().equals(y.getConfiguracion())).forEach(t -> {                            if(w.getCalificacionList().isEmpty()){                                List<Calificacion> calificacions = new ArrayList<>();                                Calificacion cal = new Calificacion();                                cal.setValor(0.0);                                cal.setCalificacion(Long.parseLong("0"));                                cal.setIdEstudiante(matricula);                                cal.setConfiguracionDetalle(w);                                calificacions.add(cal);                                calificacions.stream().filter(c -> c.getIdEstudiante().getIdEstudiante().equals(matricula.getIdEstudiante()) && c.getConfiguracionDetalle().getConfiguracionDetalle().equals(w.getConfiguracionDetalle())).forEach(z -> {                                    cpum1.add(new DtoCalificacionEstudiante.CalificacionesPorUnidadyMateria(x.getCveGrupo(), x.getCveGrupo().getIdGrupo(), x, x.getCarga(), x.getIdPlanMateria(),                                            x.getIdPlanMateria().getIdPlanMateria(), x.getIdPlanMateria().getIdMateria(), x.getIdPlanMateria().getIdMateria().getIdMateria(),                                            y.getIdUnidadMateria(), y.getIdUnidadMateria().getIdUnidadMateria(), y, y.getConfiguracion(), w, w.getConfiguracionDetalle(),                                            t, t.getUnidadMateriaConfiguracion().getConfiguracion(), z, z.getCalificacion()));                                });                            }else{                                w.getCalificacionList().stream().filter(c -> c.getIdEstudiante().getIdEstudiante().equals(matricula.getIdEstudiante()) && c.getConfiguracionDetalle().getConfiguracionDetalle().equals(w.getConfiguracionDetalle())).forEach(z -> {                                    cpum1.add(new DtoCalificacionEstudiante.CalificacionesPorUnidadyMateria(x.getCveGrupo(), x.getCveGrupo().getIdGrupo(), x, x.getCarga(), x.getIdPlanMateria(),                                            x.getIdPlanMateria().getIdPlanMateria(), x.getIdPlanMateria().getIdMateria(), x.getIdPlanMateria().getIdMateria().getIdMateria(),                                            y.getIdUnidadMateria(), y.getIdUnidadMateria().getIdUnidadMateria(), y, y.getConfiguracion(), w, w.getConfiguracionDetalle(),                                            t, t.getUnidadMateriaConfiguracion().getConfiguracion(), z, z.getCalificacion()));                                });                            }                        });                    });                });            });            cpum = new ArrayList<>(new HashSet<>(cpum1));            cpum.forEach(x -> {                BigDecimal porcentaje_detalle = new BigDecimal(x.getUnidadMateriaConfiguracionDetalle().getPorcentaje());                BigDecimal valor = BigDecimal.ZERO;                if(x.getCalificacion().getValor() != null){                    valor = new BigDecimal(x.getCalificacion().getValor());                }                BigDecimal promedio_detalle = porcentaje_detalle.divide(new BigDecimal(100)).multiply(valor);                cpd.add(new DtoCalificacionEstudiante.CalificacionesPorDetalle(x.getMateria(), x.getIdMateria(),                        x.getUnidadMateria(), x.getIdUnidadMateria(), x.getUnidadMateriaConfiguracion(), x.getIdUnidadMateriaConfiguracion(), x.getUnidadMateriaConfiguracionDetalle(),                        x.getIdUnidadMateriaConfiguracionDetalle(), x.getUnidadMateriaConfiguracionCriterio(), x.getIdUnidadMateriaConfiguracionCriterio(), x.getCalificacion(),                        x.getIdCalificacion(), porcentaje_detalle, valor, promedio_detalle));            });            cpd.forEach(x -> {                Estudiante estudiante = x.getCalificacion().getIdEstudiante();                BigDecimal sumaPromedio = cpd.stream().filter(a -> a.getIdUnidadMateriaConfiguracionCriterio().equals(x.getIdUnidadMateriaConfiguracionCriterio()) &&                        a.getIdMateria().equals(x.getIdMateria()) && a.getIdUnidadMateria().equals(x.getIdUnidadMateria()) &&                        a.getUnidadMateriaConfiguracionDetalle().getConfiguracionDetalle().equals(x.getUnidadMateriaConfiguracionDetalle().getConfiguracionDetalle()))                        .map(DtoCalificacionEstudiante.CalificacionesPorDetalle::getPromedio_detalle).reduce(BigDecimal.ZERO, BigDecimal::add);                BigDecimal porcentajeRecomendado = new BigDecimal(x.getUnidadMateriaConfiguracionCriterio().getCriterio1().getPorcentajeRecomendado());                BigDecimal promedioCriterio = porcentajeRecomendado.divide(new BigDecimal(100)).multiply(sumaPromedio);                cpc.add(new DtoCalificacionEstudiante.CalificacionePorCriterio(x.getIdMateria(), x.getMateria(), x.getIdUnidadMateria(), x.getUnidadMateria(),                        x.getUnidadMateriaConfiguracion(), x.getIdUnidadMateriaConfiguracionCriterio(), x.getUnidadMateriaConfiguracionCriterio(), x.getIdUnidadMateriaConfiguracionDetalle(),                        x.getUnidadMateriaConfiguracionDetalle(), estudiante, porcentajeRecomendado, promedioCriterio));            });            cpc.forEach(x -> {                Grupo grupo = x.getEstudiante().getGrupo();                BigDecimal porcentaje = new BigDecimal(x.getConfiguracion().getPorcentaje());                BigDecimal promedioUnidad = cpc.stream().filter(b -> b.getMateria().getIdMateria().equals(x.getMateria().getIdMateria()) &&                        b.getUnidadMateria().getIdUnidadMateria().equals(x.getUnidadMateria().getIdUnidadMateria()))                        .map(DtoCalificacionEstudiante.CalificacionePorCriterio::getPromedioCriterio).reduce(BigDecimal.ZERO, BigDecimal::add).setScale(2, RoundingMode.HALF_UP);                String escala = "";                if(promedioUnidad.compareTo(BigDecimal.valueOf(0)) == 0 || promedioUnidad.compareTo(BigDecimal.valueOf(8)) < 0){                    escala = "NA";                }                if(promedioUnidad.compareTo(BigDecimal.valueOf(10)) == 0){                    escala = "AU";                    if(x.getUnidadMateria().getIntegradora() == Boolean.TRUE){                        escala = "CA";                    }                }                if((promedioUnidad.compareTo(BigDecimal.valueOf(9)) >= 0) && (promedioUnidad.compareTo(BigDecimal.valueOf(10)) < 0)){                    escala = "DE";                    if(x.getUnidadMateria().getIntegradora() == Boolean.TRUE){                        escala = "CD";                    }                }                if(promedioUnidad.compareTo(BigDecimal.valueOf(8)) >= 0 && promedioUnidad.compareTo(BigDecimal.valueOf(9)) < 0){                    escala = "SA";                    if(x.getUnidadMateria().getIntegradora() == Boolean.TRUE){                        escala = "CO";                    }                }                cpu.add(new DtoCalificacionEstudiante.CalificacionePorUnidad(x.getMateria(), x.getUnidadMateria(), x.getConfiguracion(), x.getEstudiante(), escala, porcentaje, promedioUnidad));            });            cpuFiltro = new ArrayList<>(new HashSet<>(cpu));            return ResultadoEJB.crearCorrecto(cpuFiltro, "Se empaquetaron las materias por estudiante seleccionado");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packCalificacionesPorUnidadyMateria1)", e, null);        }    }    public ResultadoEJB<List<DtoCalificacionEstudiante.TareaIntegradoraPorMateria>> packTareaIntegradora(Estudiante matricula){        try {            List<DtoCalificacionEstudiante.TareaIntegradoraPorMateria> tipm = new ArrayList<>();            List<DtoCalificacionEstudiante.MateriasPorEstudiante> mpe = packMaterias(matricula).getValor();            mpe.forEach(x -> {                if(x.getCargaAcademica().getTareaIntegradora() != null){                    TareaIntegradora tareaIntegradora = x.getCargaAcademica().getTareaIntegradora();                    if(tareaIntegradora.getTareaIntegradoraPromedioList().isEmpty()){                        TareaIntegradoraPromedio tip = new TareaIntegradoraPromedio();                        TareaIntegradoraPromedioPK pk = new TareaIntegradoraPromedioPK(tareaIntegradora.getIdTareaIntegradora(), matricula.getIdEstudiante());                        tip.setTareaIntegradoraPromedioPK(pk); tip.setTareaIntegradora(tareaIntegradora); tip.setValor(0.0); tip.setEstudiante(matricula);                        List<TareaIntegradoraPromedio> listTIP = new ArrayList<>();                        listTIP.add(tip);                        listTIP.forEach(y -> {                            tipm.add(new DtoCalificacionEstudiante.TareaIntegradoraPorMateria(matricula, x.getGrupo(), x.getCargaAcademica(), x.getPlanEstudioMateria(), x.getMateria(), tareaIntegradora, y));                        });                    }else{                        tareaIntegradora.getTareaIntegradoraPromedioList().stream().filter(a -> a.getTareaIntegradora().getIdTareaIntegradora().equals(x.getCargaAcademica().getTareaIntegradora().getIdTareaIntegradora()))                                .forEach(y -> {                            tipm.add(new DtoCalificacionEstudiante.TareaIntegradoraPorMateria(matricula, x.getGrupo(), x.getCargaAcademica(), x.getPlanEstudioMateria(), x.getMateria(), tareaIntegradora, y));                        });                    }                }else{                    TareaIntegradora ti = new TareaIntegradora();                    ti.setIdTareaIntegradora(0); ti.setCarga(x.getCargaAcademica()); ti.setFechaEntrega(new Date()); ti.setDescripcion(""); ti.setPorcentaje(0.0);                    TareaIntegradoraPromedio tip = new TareaIntegradoraPromedio();                    TareaIntegradoraPromedioPK pk = new TareaIntegradoraPromedioPK(ti.getIdTareaIntegradora(), matricula.getIdEstudiante());                    tip.setTareaIntegradoraPromedioPK(pk); tip.setTareaIntegradora(ti); tip.setValor(0.0); tip.setEstudiante(matricula);                    tipm.add(new DtoCalificacionEstudiante.TareaIntegradoraPorMateria(matricula, x.getGrupo(), x.getCargaAcademica(), x.getPlanEstudioMateria(), x.getMateria(), ti, tip));                }            });            return ResultadoEJB.crearCorrecto(tipm, "Se empaquetaron las materias por estudiante seleccionado");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packCalificacionesPorUnidadyMateria1)", e, null);        }    }    public ResultadoEJB<List<DtoCalificacionEstudiante.TareaIntegradoraPresentacion>> tareaIntegradoraPresentacion(Estudiante estudiante){        List<DtoCalificacionEstudiante.TareaIntegradoraPorMateria> tipm = packTareaIntegradora(estudiante).getValor();        List<DtoCalificacionEstudiante.TareaIntegradoraPresentacion> tip = new ArrayList<>();        tipm.forEach(x -> {            BigDecimal porcentaje = new BigDecimal(x.getTareaIntegradora().getPorcentaje()).divide(new BigDecimal(100));            BigDecimal promedio = new BigDecimal(x.getTareaIntegradoraPromedio().getValor());            if(porcentaje.compareTo(new BigDecimal(0)) == 0 && promedio.compareTo(new BigDecimal(0)) == 0){                String percentage = "";                String notes = "";                tip.add(new DtoCalificacionEstudiante.TareaIntegradoraPresentacion(x.getGrupo(), x.getCargaAcademica(), x.getTareaIntegradoraPromedio(), notes, percentage));            }else{                String percentage = porcentaje.toString();                String notes = promedio.toString();                tip.add(new DtoCalificacionEstudiante.TareaIntegradoraPresentacion(x.getGrupo(), x.getCargaAcademica(), x.getTareaIntegradoraPromedio(), notes, percentage));            }        });        try{            return ResultadoEJB.crearCorrecto(tip, "Se empaquetaron las materias por estudiante seleccionado");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packCalificacionesPorUnidadyMateria1)", e, null);        }    }    public ResultadoEJB<List<DtoCalificacionEstudiante.CalificacionesNivelacionPorMateria>> packPromedioNivelacionPorMateria(Estudiante matricula){        try{            List<DtoCalificacionEstudiante.PromediosNivelacionesPorMateria> pnpm = new ArrayList<>();            List<DtoCalificacionEstudiante.PromediosNivelacionesPorMateria> pnpm1;            List<DtoCalificacionEstudiante.CalificacionesNivelacionPorMateria> cnpm = new ArrayList<>();            List<CargaAcademica> ca = em.createQuery("select c from CargaAcademica as c where c.cveGrupo.idGrupo = :grupo", CargaAcademica.class).setParameter("grupo", matricula.getGrupo().getIdGrupo())                    .getResultStream().collect(Collectors.toList());            ca.stream().filter(a -> a.getCveGrupo().getIdGrupo().equals(matricula.getGrupo().getIdGrupo())).forEach(z -> {                        em.createQuery("select p from PlanEstudioMateria as p where p.idPlanMateria = :planMateria", PlanEstudioMateria.class)                                .setParameter("planMateria", z.getIdPlanMateria().getIdPlanMateria()).getResultStream().forEach(w -> {                            w.getIdMateria().getUnidadMateriaList().stream().filter(b -> b.getIdMateria().getIdMateria().equals(w.getIdMateria().getIdMateria())).forEach(v -> {                                v.getUnidadMateriaConfiguracionList().stream().filter(c -> c.getIdUnidadMateria().getIdUnidadMateria()                                        .equals(v.getIdUnidadMateria()) && c.getCarga().getCarga().equals(z.getCarga())).forEach(u -> {                                    if(u.getUnidadMateriaComentarioList().isEmpty()){                                        UnidadMateriaComentario umc = new UnidadMateriaComentario();                                        UnidadMateriaComentarioPK pk = new UnidadMateriaComentarioPK(u.getConfiguracion(), matricula.getIdEstudiante());                                        umc.setUnidadMateriaComentarioPK(pk);                                        umc.setUnidadMateriaConfiguracion(u);                                        umc.setEstudiante(matricula);                                        umc.setComentario("");                                        umc.setPromedio(0.0);                                        umc.setNivelacion(0.0);                                        List<UnidadMateriaComentario> umco = new ArrayList<>();                                        umco.add(umc);                                        umco.stream().filter(d -> d.getEstudiante().getIdEstudiante().equals(matricula.getIdEstudiante()) &&                                                d.getUnidadMateriaConfiguracion().getConfiguracion().equals(u.getConfiguracion())).forEach(t -> {                                                    pnpm.add(new DtoCalificacionEstudiante.PromediosNivelacionesPorMateria(w.getIdMateria().getIdMateria(), w.getIdMateria(), t));                                        });                                    }else {                                        u.getUnidadMateriaComentarioList().stream().filter(f -> f.getEstudiante().getIdEstudiante().equals(matricula.getIdEstudiante())                                                && f.getUnidadMateriaConfiguracion().getConfiguracion().equals(u.getConfiguracion())).forEach(s -> {                                                    if(s.getNivelacion() == null){                                                        UnidadMateriaComentario umc1 = new UnidadMateriaComentario();                                                        UnidadMateriaComentarioPK pk = new UnidadMateriaComentarioPK(s.getUnidadMateriaConfiguracion().getConfiguracion(), s.getEstudiante().getIdEstudiante());                                                        umc1.setUnidadMateriaComentarioPK(pk); umc1.setUnidadMateriaConfiguracion(s.getUnidadMateriaConfiguracion());                                                        umc1.setEstudiante(s.getEstudiante()); umc1.setComentario(""); umc1.setPromedio(s.getPromedio()); umc1.setNivelacion(0.0);                                                        pnpm.add(new DtoCalificacionEstudiante.PromediosNivelacionesPorMateria(w.getIdMateria().getIdMateria(), w.getIdMateria(), umc1));                                                    }else {                                                        pnpm.add(new DtoCalificacionEstudiante.PromediosNivelacionesPorMateria(w.getIdMateria().getIdMateria(), w.getIdMateria(), s));                                                    }                                        });                                    }                                });                            });                        });                    });            pnpm1 = pnpm;            pnpm.stream().collect(Collectors.groupingBy(DtoCalificacionEstudiante.PromediosNivelacionesPorMateria::getIdMateria, Collectors.counting())).forEach((k, v) -> {                Materia materia = em.createQuery("select m from Materia as m where m.idMateria = :idMateria", Materia.class).setParameter("idMateria", k).getResultStream().findFirst().orElse(null);                Double sumaPromedio = pnpm1.stream().filter(a -> a.getMateria().getIdMateria().equals(k)).mapToDouble(x -> x.getUnidadMateriaComentario().getNivelacion()).sum();                BigDecimal promedioNivelacion = BigDecimal.valueOf(sumaPromedio);                cnpm.add(new DtoCalificacionEstudiante.CalificacionesNivelacionPorMateria(k, materia, promedioNivelacion));            });            return ResultadoEJB.crearCorrecto(cnpm, "Se empaquetaron las materias por estudiante seleccionado");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packCalificacionesPorUnidadyMateria1)", e, null);        }    }    public ResultadoEJB<List<DtoCalificacionEstudiante.CalificacionePorMateria>> packPromedioMateria(Estudiante matricula){        try {            List<DtoCalificacionEstudiante.CalificacionePorMateria> cpm, cpm1;            List<DtoCalificacionEstudiante.CalificacionePorMateria> cpmFiltro = new ArrayList<>();            List<DtoCalificacionEstudiante.CalificacionePorMateria> cpmFiltro1 = new ArrayList<>();            ResultadoEJB<List<DtoCalificacionEstudiante.CalificacionePorUnidad>> resultadoEJB = packCalificacionesPorUnidadyMateria1(matricula);            List<DtoCalificacionEstudiante.CalificacionePorUnidad> cpu = resultadoEJB.getValor();            List<DtoCalificacionEstudiante.TareaIntegradoraPorMateria> tipm = packTareaIntegradora(matricula).getValor();            cpu.forEach(x -> {                BigDecimal porcentaje = new BigDecimal(x.getConfiguracion().getPorcentaje());                BigDecimal promedioU = x.getPromedioUnidad();                BigDecimal promedio = porcentaje.divide(new BigDecimal(100)).multiply(promedioU);                cpmFiltro.add(new DtoCalificacionEstudiante.CalificacionePorMateria(x.getEstudiante().getGrupo(), x.getMateria(), promedio));            });            cpm1 = cpmFiltro;            cpmFiltro.forEach(x -> {                Double sumaPorcentaje = tipm.stream().filter(a -> x.getMateria().getIdMateria().equals(a.getMateria().getIdMateria()) && x.getGrupo().getIdGrupo().equals(a.getGrupo().getIdGrupo())).mapToDouble(b -> b.getTareaIntegradoraPromedio().getTareaIntegradora().getPorcentaje()).sum();                BigDecimal porcentaje = BigDecimal.valueOf(sumaPorcentaje);                Double sumaPromedio = tipm.stream().filter(a -> x.getMateria().getIdMateria().equals(a.getMateria().getIdMateria()) && x.getGrupo().getIdGrupo().equals(a.getGrupo().getIdGrupo())).mapToDouble(b -> b.getTareaIntegradoraPromedio().getValor()).sum();                BigDecimal promedio = BigDecimal.valueOf(sumaPromedio);                BigDecimal promedioTI = porcentaje.divide(new BigDecimal(100), RoundingMode.HALF_UP).multiply(promedio);                BigDecimal sumaPromedioMateria = cpm1.stream().filter(a -> a.getMateria().getIdMateria()                        .equals(x.getMateria().getIdMateria())).map(DtoCalificacionEstudiante.CalificacionePorMateria::getPromedio).reduce(BigDecimal.ZERO, BigDecimal::add).add(promedioTI);                cpmFiltro1.add(new DtoCalificacionEstudiante.CalificacionePorMateria(x.getGrupo(), x.getMateria(), sumaPromedioMateria));            });            cpm = new ArrayList<>(new HashSet<>(cpmFiltro1));            return ResultadoEJB.crearCorrecto(cpm, "Lista completa de periodos");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packCalificacionesPorUnidadyMateria1)", e, null);        }    }    public ResultadoEJB<List<DtoCalificacionEstudiante.CalificacionePorMateria>> packCalificacionesFinales(Estudiante matricula){        try{            List<DtoCalificacionEstudiante.CalificacionePorMateria> cpm = new ArrayList<>();            List<DtoCalificacionEstudiante.CalificacionePorMateria> resultadosCPM = packPromedioMateria(matricula).getValor();            List<DtoCalificacionEstudiante.CalificacionesNivelacionPorMateria> resultadosPNPM = packPromedioNivelacionPorMateria(matricula).getValor();            resultadosCPM.stream().forEach(x -> {                resultadosPNPM.stream().filter(a -> a.getIdMateria().equals(x.getMateria().getIdMateria())).forEach(y -> {                    if(x.getPromedio().compareTo(BigDecimal.valueOf(8)) < 0){                        cpm.add(new DtoCalificacionEstudiante.CalificacionePorMateria(x.getGrupo(), x.getMateria(), y.getPromedio()));                    }else{                        cpm.add(new DtoCalificacionEstudiante.CalificacionePorMateria(x.getGrupo(), x.getMateria(), x.getPromedio()));                    }                });            });            return ResultadoEJB.crearCorrecto(cpm, "Lista completa de periodos");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packCalificacionesPorUnidadyMateria1)", e, null);        }    }    public ResultadoEJB<BigDecimal> obtenerPromedioCuatrimestral(Estudiante matricula, Integer periodo){        try{            List<DtoCalificacionEstudiante.CalificacionePorMateria> cpm = packCalificacionesFinales(matricula).getValor().stream().filter(a -> a.getGrupo().getPeriodo() == periodo).collect(Collectors.toList());            BigDecimal promedioCuatrimestral = cpm.stream().map(DtoCalificacionEstudiante.CalificacionePorMateria::getPromedio).reduce(BigDecimal.ZERO, BigDecimal::add);            return ResultadoEJB.crearCorrecto(promedioCuatrimestral.setScale(2, RoundingMode.HALF_UP), "Lista completa de periodos");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packCalificacionesPorUnidadyMateria1)", e, null);        }    }    public ResultadoEJB<List<BigDecimal>> obtenerPromedioAcumulado(Estudiante matricula){        try{            List<BigDecimal> promediosAcumulados = new ArrayList<>();            List<DtoCalificacionEstudiante.CalificacionePorMateria> cpm = packCalificacionesFinales(matricula).getValor();            List<DtoCalificacionEstudiante.MateriasPorEstudiante> mpe = packMaterias(matricula).getValor();            List<PeriodosEscolares> periodos = new ArrayList<>(obtenerListaPeriodosEscolares().getValor());            periodos.stream().forEach(x -> {                BigDecimal totalMaterias = new BigDecimal(mpe.stream().filter(b -> b.getGrupo().getPeriodo() == x.getPeriodo()).count());                BigDecimal promedioAcumulado = cpm.stream().filter(a -> a.getGrupo().getPeriodo() == x.getPeriodo()).map(DtoCalificacionEstudiante.CalificacionePorMateria::getPromedio).reduce(BigDecimal.ZERO, BigDecimal::add);                BigDecimal promedio = promedioAcumulado.divide(totalMaterias, RoundingMode.HALF_UP);                promediosAcumulados.add(promedio.setScale(2, RoundingMode.HALF_UP));            });            return ResultadoEJB.crearCorrecto(promediosAcumulados, "Lista completa de periodos");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packCalificacionesPorUnidadyMateria1)", e, null);        }    }}