package mx.edu.utxj.pye.sgi.ejb.controlEscolar;import mx.edu.utxj.pye.sgi.dto.ResultadoEJB;import mx.edu.utxj.pye.sgi.dto.controlEscolar.DtoCalificacionEstudiante;import mx.edu.utxj.pye.sgi.entity.ch.Personal;import mx.edu.utxj.pye.sgi.entity.controlEscolar.*;import mx.edu.utxj.pye.sgi.entity.prontuario.PeriodosEscolares;import mx.edu.utxj.pye.sgi.facade.Facade;import javax.annotation.PostConstruct;import javax.ejb.EJB;import javax.ejb.Stateless;import javax.persistence.EntityManager;import java.math.BigDecimal;import java.math.RoundingMode;import java.sql.Connection;import java.util.ArrayList;import java.util.HashSet;import java.util.List;import java.util.concurrent.CompletableFuture;import java.util.stream.Collectors;import static org.jooq.lambda.Seq.seq;@Statelesspublic class EjbConsultaCalificacion {    @EJB    Facade f;    private EntityManager em;    @PostConstruct    public void init(){        em = f.getEntityManager();    }    /**     * Permite validar si el usuario logueado es del tipo estudiante     * @param matricula     * @return Regresa la instancia del estudiante si este cumple con lo mencionado     */    public ResultadoEJB<Estudiante> validadEstudiante(Integer matricula){        try{            Estudiante e = em.createQuery("select e from Estudiante as e where e.matricula = :matricula", Estudiante.class).setParameter("matricula", matricula)                    .getResultStream().findFirst().orElse(new Estudiante());            return ResultadoEJB.crearCorrecto(e, "El usuario ha sido comprobado como estudiante.");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "El personal docente no se pudo validar. (EjbConsultaCalificacion.validadEstudiante)", e, null);        }    }    /**     * Permite obtener el periodo activo.     * @return Regresa la instancia del periodo activo     */    public ResultadoEJB<PeriodosEscolares> periodoActivo(){        try {            PeriodosEscolares periodo = em.createQuery("select p from PeriodosEscolares  as p order by p.periodo desc", PeriodosEscolares.class).getResultStream().findFirst().orElse(new PeriodosEscolares());            return ResultadoEJB.crearCorrecto(periodo, "Periodo activo");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.periodoActivo)", e, null);        }    }    /**     * Permite obtener las lista de periodos a partir del periodo 52     * @return Regresa la lista de periodos encontrados     */    public ResultadoEJB<List<PeriodosEscolares>> obtenerListaPeriodosEscolares(){        try {            List<PeriodosEscolares> pe = em.createQuery("select p from PeriodosEscolares as p where p.periodo >= :periodo", PeriodosEscolares.class)                    .setParameter("periodo", 52).getResultStream().collect(Collectors.toList());            return ResultadoEJB.crearCorrecto(pe, "Lista completa de periodos");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.obtenerListaPeriodosEscolares)", e, null);        }    }    /**     * Lista de métodos encargados de procesar la informacion de acuerdo a la información de las entidades pertenecientes     *     */    public ResultadoEJB<List<Estudiante>> obtenerEstudiante(Integer matricula){        try{            List<Estudiante> e = em.createQuery("select e from Estudiante as e where e.matricula = :matricula", Estudiante.class).setParameter("matricula", matricula).getResultStream().collect(Collectors.toList());            return ResultadoEJB.crearCorrecto(e, "Se empaquetaron las materias por estudiante seleccionado");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packMaterias)", e, null);        }    }    public ResultadoEJB<List<Grupo>> obtenerGrupos(){        try{            List<Grupo> g = em.createQuery("select g from Grupo as g", Grupo.class).getResultStream().collect(Collectors.toList());            return ResultadoEJB.crearCorrecto(g, "Se empaquetaron las materias por estudiante seleccionado");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packMaterias)", e, null);        }    }    public ResultadoEJB<List<CargaAcademica>> obtenerCargasAcademicas(){        try{            List<CargaAcademica> ca = em.createQuery("select c from CargaAcademica as c", CargaAcademica.class).getResultStream().collect(Collectors.toList());            return ResultadoEJB.crearCorrecto(ca, "Se empaquetaron las materias por estudiante seleccionado");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packMaterias)", e, null);        }    }    public ResultadoEJB<List<PlanEstudioMateria>> obtenerPlanesdeEstudioMateria(){        try{            List<PlanEstudioMateria> pem = em.createQuery("select p from PlanEstudioMateria as p", PlanEstudioMateria.class).getResultStream().collect(Collectors.toList());            return ResultadoEJB.crearCorrecto(pem, "Se empaquetaron las materias por estudiante seleccionado");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packMaterias)", e, null);        }    }    public ResultadoEJB<List<Materia>> obtenerMaterias(){        try{            List<Materia> m = em.createQuery("select m from Materia as m", Materia.class).getResultStream().collect(Collectors.toList());            return ResultadoEJB.crearCorrecto(m, "Se empaquetaron las materias por estudiante seleccionado");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packMaterias)", e, null);        }    }    public ResultadoEJB<List<UnidadMateria>> obtenerUnidadesMateria(){        try{            List<UnidadMateria> um = em.createQuery("select u from UnidadMateria as u", UnidadMateria.class).getResultStream().collect(Collectors.toList());            return ResultadoEJB.crearCorrecto(um, "Se empaquetaron las materias por estudiante seleccionado");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packMaterias)", e, null);        }    }    public ResultadoEJB<List<UnidadMateriaConfiguracion>> obtenerUnidadMateriaConfiguracion(){        try{            List<UnidadMateriaConfiguracion> umc = em.createQuery("select u from UnidadMateriaConfiguracion as u",UnidadMateriaConfiguracion.class).getResultStream().collect(Collectors.toList());            return ResultadoEJB.crearCorrecto(umc, "Se empaquetaron las materias por estudiante seleccionado");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packMaterias)", e, null);        }    }    public ResultadoEJB<List<UnidadMateriaComentario>> obtenerUnidadMateriaComentario(){        try{            List<UnidadMateriaComentario> umc = em.createQuery("select u from UnidadMateriaComentario as u",UnidadMateriaComentario.class).getResultStream().collect(Collectors.toList());            return ResultadoEJB.crearCorrecto(umc, "Se empaquetaron las materias por estudiante seleccionado");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packMaterias)", e, null);        }    }    public ResultadoEJB<List<UnidadMateriaConfiguracionDetalle>> obtenerUnidadMateriaConfiguracionDetalle(){        try{            List<UnidadMateriaConfiguracionDetalle> umcd = em.createQuery("select u from UnidadMateriaConfiguracionDetalle as u", UnidadMateriaConfiguracionDetalle.class).getResultStream().collect(Collectors.toList());            return ResultadoEJB.crearCorrecto(umcd, "Se empaquetaron las materias por estudiante seleccionado");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packMaterias)", e, null);        }    }    public ResultadoEJB<List<UnidadMateriaConfiguracionCriterio>> obtenerUnidadMateriaConfiguracionCriterio(){        try{            List<UnidadMateriaConfiguracionCriterio> umcc = em.createQuery("select u from UnidadMateriaConfiguracionCriterio as u", UnidadMateriaConfiguracionCriterio.class).getResultStream().collect(Collectors.toList());            return ResultadoEJB.crearCorrecto(umcc, "Se empaquetaron las materias por estudiante seleccionado");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packMaterias)", e, null);        }    }    public ResultadoEJB<List<Criterio>> obtenerCriterios(){        try{            List<Criterio> c = em.createQuery("select c from Criterio as c", Criterio.class).getResultStream().collect(Collectors.toList());            return ResultadoEJB.crearCorrecto(c, "Se empaquetaron las materias por estudiante seleccionado");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packMaterias)", e, null);        }    }    public ResultadoEJB<List<Calificacion>> obtenerCalificacion(){        try{            List<Calificacion> c = em.createQuery("select c from Calificacion as c", Calificacion.class).getResultStream().collect(Collectors.toList());            return ResultadoEJB.crearCorrecto(c, "Se empaquetaron las materias por estudiante seleccionado");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packMaterias)", e, null);        }    }    public ResultadoEJB<List<TareaIntegradora>> obtenerTareaIntegradora(){        try{            List<TareaIntegradora> ti = em.createQuery("select t from TareaIntegradora as t", TareaIntegradora.class).getResultStream().collect(Collectors.toList());            return ResultadoEJB.crearCorrecto(ti, "Se empaquetaron las materias por estudiante seleccionado");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packMaterias)", e, null);        }    }    public ResultadoEJB<List<TareaIntegradoraPromedio>> obtenerTareaIntegradoraPromedio(){        try{            List<TareaIntegradoraPromedio> tip = em.createQuery("select t from TareaIntegradoraPromedio as t", TareaIntegradoraPromedio.class).getResultStream().collect(Collectors.toList());            return ResultadoEJB.crearCorrecto(tip, "Se empaquetaron las materias por estudiante seleccionado");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packMaterias)", e, null);        }    }    /**     * Fin de las listas     *     */    public ResultadoEJB<List<DtoCalificacionEstudiante.MateriasPorEstudiante>> packMaterias(Integer matricula){        try {            List<Personal> docente = em.createQuery("select p from Personal as p", Personal.class).getResultStream().collect(Collectors.toList());            List<DtoCalificacionEstudiante.MateriasPorEstudiante> materiasPorEstudiante = new ArrayList<>();            List<Estudiante> e = obtenerEstudiante(matricula).getValor();            e.stream().forEach(x -> {                x.getGrupo().getCargaAcademicaList().stream().filter(a -> a.getCveGrupo().equals(x.getGrupo())).forEach(y -> {                    docente.stream().filter(b -> b.getClave().equals(y.getDocente())).forEach(z -> {                        materiasPorEstudiante.add(new DtoCalificacionEstudiante.MateriasPorEstudiante(x.getGrupo().getPeriodo(),x.getGrupo(), y, y.getIdPlanMateria(),                                y.getIdPlanMateria().getIdMateria(), z));                    });                });            });            return ResultadoEJB.crearCorrecto(materiasPorEstudiante, "Se empaquetaron las materias por estudiante seleccionado");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packMaterias)", e, null);        }    }    public ResultadoEJB<List<DtoCalificacionEstudiante.CalificacionesNivelacionPorMateria>> packPromedioNivelacionPorMateria(Integer matricula){        try{            List<DtoCalificacionEstudiante.PromediosNivelacionesPorMateria> pnpm = new ArrayList<>();            List<DtoCalificacionEstudiante.PromediosNivelacionesPorMateria> pnpm1;            List<DtoCalificacionEstudiante.CalificacionesNivelacionPorMateria> cnpm = new ArrayList<>();            List<CargaAcademica> ca = obtenerCargasAcademicas().getValor();            List<UnidadMateriaConfiguracion> umc = obtenerUnidadMateriaConfiguracion().getValor();            List<UnidadMateriaComentario> umco = obtenerUnidadMateriaComentario().getValor();            List<Grupo> g = obtenerGrupos().getValor();            List<Estudiante> e = obtenerEstudiante(matricula).getValor();            List<PlanEstudioMateria> pem = obtenerPlanesdeEstudioMateria().getValor();            List<Materia> m = obtenerMaterias().getValor();            List<UnidadMateria> um = obtenerUnidadesMateria().getValor();            seq(e).innerJoin(g, (e1, g1) -> e1.getGrupo().getIdGrupo().equals(g1.getIdGrupo()))                    .innerJoin(ca, (g1, ca1) -> (ca1.getCveGrupo().getIdGrupo().equals(g1.v2.getIdGrupo())))                    .innerJoin(pem, (ca2, pem1) -> (ca2.v2.getIdPlanMateria().getIdPlanMateria().equals(pem1.getIdPlanMateria())))                    .innerJoin(m, (pem2, m1) -> (pem2.v2.getIdMateria().getIdMateria().equals(m1.getIdMateria())))                    .innerJoin(um, (m2, um1) -> (um1.getIdMateria().getIdMateria().equals(m2.v2.getIdMateria())))                    .innerJoin(umc, (ca3, umc1) -> (umc1.getCarga().getCarga().equals(ca3.v1.v1.v1.v2.getCarga())))                    .leftOuterJoin(umco, (umc2, umco1) -> (umco1.getEstudiante().getIdEstudiante().equals(umc2.v1.v1.v1.v1.v1.v1.getIdEstudiante()) && umc2.v2.getConfiguracion().equals(umco1.getUnidadMateriaConfiguracion().getConfiguracion())))                    .forEach(x -> {                        if(x.v2 != null){                            if(x.v2.getNivelacion() == null){                                UnidadMateriaComentario umco3 = new UnidadMateriaComentario();                                UnidadMateriaComentarioPK pk = new UnidadMateriaComentarioPK(x.v2.getUnidadMateriaConfiguracion().getConfiguracion(),                                        x.v2.getEstudiante().getIdEstudiante());                                umco3.setUnidadMateriaComentarioPK(pk);                                umco3.setUnidadMateriaConfiguracion(x.v1.v2);                                umco3.setEstudiante(x.v2.getEstudiante());                                umco3.setComentario("");                                umco3.setPromedio(0.0);                                umco3.setNivelacion(0.0);                                pnpm.add(new DtoCalificacionEstudiante.PromediosNivelacionesPorMateria(x.v1.v1.v1.v2.getIdMateria(), x.v1.v1.v1.v2, umco3));                            }else{                                pnpm.add(new DtoCalificacionEstudiante.PromediosNivelacionesPorMateria(x.v1.v1.v1.v2.getIdMateria(), x.v1.v1.v1.v2, x.v2));                            }                        }else{                            UnidadMateriaComentario umco3 = new UnidadMateriaComentario();                            UnidadMateriaComentarioPK pk = new UnidadMateriaComentarioPK(x.v1.v2.getConfiguracion(), x.v1.v1.v1.v1.v1.v1.v1.getIdEstudiante());                            umco3.setUnidadMateriaComentarioPK(pk);                            umco3.setUnidadMateriaConfiguracion(x.v1.v2);                            umco3.setEstudiante(x.v1.v1.v1.v1.v1.v1.v1);                            umco3.setComentario("");                            umco3.setPromedio(0.0);                            umco3.setNivelacion(0.0);                            pnpm.add(new DtoCalificacionEstudiante.PromediosNivelacionesPorMateria(x.v1.v1.v1.v2.getIdMateria(), x.v1.v1.v1.v2, umco3));                        }                    });            pnpm1 = pnpm;            pnpm.stream().collect(Collectors.groupingBy(DtoCalificacionEstudiante.PromediosNivelacionesPorMateria::getIdMateria, Collectors.counting())).forEach((k, v) -> {                Materia materia = em.createQuery("select m from Materia as m where m.idMateria = :idMateria", Materia.class).setParameter("idMateria", k).getResultStream().findFirst().orElse(null);                Double sumaPromedio = pnpm1.stream().filter(a -> a.getMateria().getIdMateria().equals(k)).mapToDouble(x -> x.getUnidadMateriaComentario().getNivelacion()).sum();                BigDecimal promedioNivelacion = BigDecimal.valueOf(sumaPromedio);                cnpm.add(new DtoCalificacionEstudiante.CalificacionesNivelacionPorMateria(k, materia, promedioNivelacion));            });            return ResultadoEJB.crearCorrecto(cnpm, "Se empaquetaron las materias por estudiante seleccionado");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packMaterias)", e, null);        }    }    public ResultadoEJB<List<DtoCalificacionEstudiante.TareaIntegradoraPorMateria>> packTareaIntegradora(Integer matricula){        try {            List<DtoCalificacionEstudiante.TareaIntegradoraPorMateria> tipm = new ArrayList<>();            List<CargaAcademica> ca = obtenerCargasAcademicas().getValor();            List<TareaIntegradora> ti = obtenerTareaIntegradora().getValor();            List<TareaIntegradoraPromedio> tip = obtenerTareaIntegradoraPromedio().getValor();            List<PlanEstudioMateria> pem = obtenerPlanesdeEstudioMateria().getValor();            List<Materia> m = obtenerMaterias().getValor();            List<Grupo> g = obtenerGrupos().getValor();            List<Estudiante> e = obtenerEstudiante(matricula).getValor();            seq(e).innerJoin(seq(g), (e1, g1) -> e1.getGrupo().getIdGrupo().equals(g1.getIdGrupo()))                        .innerJoin(seq(ca), (g2, c) -> c.getCveGrupo().getIdGrupo().equals(g2.v2.getIdGrupo()))                        .innerJoin(seq(pem), (c1, pe) -> c1.v2.getIdPlanMateria().getIdPlanMateria().equals(pe.getIdPlanMateria()))                        .innerJoin(seq(m), (pe1, m1) -> pe1.v2.getIdMateria().getIdMateria().equals(m1.getIdMateria()))                        .innerJoin(seq(ti), (c2, ti1) -> ti1.getCarga().getCarga().equals(c2.v1.v1.v2.getCarga()))                        .leftOuterJoin(seq(tip), (ti2, tip1) ->tip1.getEstudiante().getIdEstudiante().equals(ti2.v1.v1.v1.v1.v1.getIdEstudiante()) && tip1.getTareaIntegradora().getIdTareaIntegradora().equals(ti2.v2.getIdTareaIntegradora()))                        .forEach(x -> {                            if(x.v2 != null){                                tipm.add(new DtoCalificacionEstudiante.TareaIntegradoraPorMateria(x.v1.v1.v1.v1.v1.v1, x.v1.v1.v1.v1.v1.v2, x.v1.v1.v1.v1.v2, x.v1.v1.v1.v2,                                        x.v1.v1.v2, x.v1.v2, x.v2));                            }else{                                TareaIntegradoraPromedio tareaIntegradoraPromedio = new TareaIntegradoraPromedio();                                TareaIntegradoraPromedioPK pk = new TareaIntegradoraPromedioPK(x.v1.v2.getIdTareaIntegradora(), x.v1.v1.v1.v1.v1.v1.getIdEstudiante());                                tareaIntegradoraPromedio.setTareaIntegradoraPromedioPK(pk);                                tareaIntegradoraPromedio.setEstudiante(x.v1.v1.v1.v1.v1.v1);                                tareaIntegradoraPromedio.setTareaIntegradora(x.v1.v2);                                tareaIntegradoraPromedio.setValor(0);                                tipm.add(new DtoCalificacionEstudiante.TareaIntegradoraPorMateria(x.v1.v1.v1.v1.v1.v1, x.v1.v1.v1.v1.v1.v2, x.v1.v1.v1.v1.v2, x.v1.v1.v1.v2,                                        x.v1.v1.v2, x.v1.v2, tareaIntegradoraPromedio));                            }                        });            return ResultadoEJB.crearCorrecto(tipm, "Se empaquetaron las materias por estudiante seleccionado");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packMaterias)", e, null);        }    }    public ResultadoEJB<List<DtoCalificacionEstudiante.UnidadesPorMateria>> packUnidadesmateria(Integer matricula){        try {            List<DtoCalificacionEstudiante.UnidadesPorMateria> unidadesPorMateria = new ArrayList<>();            List<Estudiante> e = obtenerEstudiante(matricula).getValor();            e.forEach(x -> {                x.getGrupo().getCargaAcademicaList().stream().filter(a -> a.getCveGrupo().equals(x.getGrupo())).forEach(y -> {                    y.getIdPlanMateria().getIdMateria().getUnidadMateriaList().stream().filter(b -> b.getIdMateria().equals(y.getIdPlanMateria().getIdMateria())).forEach(z -> {                        z.getUnidadMateriaConfiguracionList().stream().filter(c -> c.getCarga().getCarga().equals(y.getCarga()) &&                                c.getIdUnidadMateria().getIdUnidadMateria().equals(z.getIdUnidadMateria())).forEach(w -> {                                    BigDecimal porcentaje = new BigDecimal(w.getPorcentaje()).divide(new BigDecimal(100));                            unidadesPorMateria.add(new DtoCalificacionEstudiante.UnidadesPorMateria(                                    x.getGrupo(), y, y.getIdPlanMateria(), y.getIdPlanMateria().getIdMateria(), z,w, porcentaje, z.getNoUnidad()));                        });                    });                });            });            return ResultadoEJB.crearCorrecto(unidadesPorMateria, "Se empaquetaron las materias por estudiante seleccionado");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packMaterias)", e, null);        }    }    public ResultadoEJB<List<DtoCalificacionEstudiante.CalificacionesPorUnidadyMateria>> obtenerCalificacionesPorUnidad(Integer matricula){        try{            List<DtoCalificacionEstudiante.CalificacionesPorUnidadyMateria1> cpum1 = new ArrayList<>();            List<DtoCalificacionEstudiante.CalificacionesPorUnidadyMateria> cpum = new ArrayList<>();            List<Estudiante> e = obtenerEstudiante(matricula).getValor();            List<Grupo> grupos = obtenerGrupos().getValor();            List<CargaAcademica> ca = obtenerCargasAcademicas().getValor();            List<PlanEstudioMateria> pem = obtenerPlanesdeEstudioMateria().getValor();            List<Materia> m = obtenerMaterias().getValor();            List<UnidadMateria> um = obtenerUnidadesMateria().getValor();            List<UnidadMateriaConfiguracion> umc = obtenerUnidadMateriaConfiguracion().getValor();            List<UnidadMateriaConfiguracionCriterio> umcc = obtenerUnidadMateriaConfiguracionCriterio().getValor();            List<Criterio> criterios = obtenerCriterios().getValor();            List<UnidadMateriaConfiguracionDetalle> umcd = obtenerUnidadMateriaConfiguracionDetalle().getValor();            List<Calificacion> calificaciones = obtenerCalificacion().getValor();            /*e.forEach(p -> {                p.getGrupo().getCargaAcademicaList().forEach(q -> {                    q.getIdPlanMateria();                    q.getIdPlanMateria().getIdMateria();                    q.getIdPlanMateria().getIdMateria().getUnidadMateriaList().stream().filter(a -> a.getIdMateria().getIdMateria().equals(q.getIdPlanMateria().getIdMateria().getIdMateria())).forEach(r -> {                        r.getUnidadMateriaConfiguracionList().forEach(s -> {                            s.getUnidadMateriaConfiguracionCriterioList().forEach(t -> {                                t.getCriterio1().getUnidadMateriaConfiguracionDetalleList().stream().filter()                            });                        });                    });                });            });            e.stream().forEach(p -> {                grupos.stream().filter(a -> a.getIdGrupo().equals(p.getGrupo().getIdGrupo())).forEach(q -> {                    ca.stream().filter(b -> b.getCveGrupo().getIdGrupo().equals(q.getIdGrupo())).forEach(r -> {                        pem.stream().filter(c -> r.getIdPlanMateria().getIdPlanMateria().equals(c.getIdPlanMateria())).forEach(s -> {                            m.stream().filter(d -> s.getIdMateria().getIdMateria().equals(d.getIdMateria())).forEach(t -> {                                um.stream().filter(f -> f.getIdMateria().getIdMateria().equals(t.getIdMateria())).forEach(u -> {                                    umc.stream().filter(h -> h.getCarga().getCarga().equals(r.getCarga()) && h.getIdUnidadMateria().getIdUnidadMateria().equals(u.getIdUnidadMateria())).forEach(v -> {                                        umcc.stream().filter(i -> i.getUnidadMateriaConfiguracion().getConfiguracion().equals(v.getConfiguracion())).forEach(w -> {                                            criterios.stream().filter(j -> w.getCriterio1().getCriterio().equals(j.getCriterio())).forEach(x -> {                                                umcd.stream().filter(k -> k.getCriterio().getCriterio().equals(x.getCriterio()) && k.getConfiguracion().getConfiguracion().equals(v.getConfiguracion())).forEach(y -> {                                                    cpum1.add(new DtoCalificacionEstudiante.CalificacionesPorUnidadyMateria1( p,                                                            q, q.getIdGrupo(), r, r.getCarga(), s, s.getIdPlanMateria(), t, t.getIdMateria(), u, u.getIdUnidadMateria(), v, v.getConfiguracion(),                                                            y, y.getConfiguracionDetalle(), w, w.getUnidadMateriaConfiguracion().getConfiguracion()                                                    ));                                                });                                            });                                        });                                    });                                });                            });                        });                    });                });            });            seq(cpum1).leftOuterJoin(seq(calificaciones), (umcd3, calificacion) -> (umcd3.getIdUnidadMateriaConfiguracionDetalle().equals(calificacion.getConfiguracionDetalle().getConfiguracionDetalle())))                        .forEach(x -> {                            if(x.v2 != null){                                cpum.add(new DtoCalificacionEstudiante.CalificacionesPorUnidadyMateria(x.v1.getGrupo(), x.v1.getIdGrupo(),                                        x.v1.getCargaAcademica(), x.v1.getIdCargaAcademica(), x.v1.getPlanEstudioMateria(), x.v1.getIdPlanEstudioMateria(),                                        x.v1.getMateria(), x.v1.getIdMateria(), x.v1.getUnidadMateria(), x.v1.getIdUnidadMateria(),                                        x.v1.getUnidadMateriaConfiguracion(), x.v1.getIdUnidadMateriaConfiguracion(), x.v1.getUnidadMateriaConfiguracionDetalle(), x.v1.getIdUnidadMateriaConfiguracionDetalle(),                                        x.v1.getUnidadMateriaConfiguracionCriterio(), x.v1.getIdUnidadMateriaConfiguracionCriterio(), x.v2, x.v2.getCalificacion()));                            }else{                                Calificacion cal = new Calificacion();                                cal.setConfiguracionDetalle(x.v1.getUnidadMateriaConfiguracionDetalle());                                cal.setIdEstudiante(x.v1.getEstudiante());                                cal.setCalificacion(Long.parseLong("0"));                                cal.setValor(0.0);                                cpum.add(new DtoCalificacionEstudiante.CalificacionesPorUnidadyMateria(x.v1.getGrupo(), x.v1.getIdGrupo(),                                        x.v1.getCargaAcademica(), x.v1.getIdCargaAcademica(), x.v1.getPlanEstudioMateria(), x.v1.getIdPlanEstudioMateria(),                                        x.v1.getMateria(), x.v1.getIdMateria(), x.v1.getUnidadMateria(), x.v1.getIdUnidadMateria(),                                        x.v1.getUnidadMateriaConfiguracion(), x.v1.getIdUnidadMateriaConfiguracion(), x.v1.getUnidadMateriaConfiguracionDetalle(), x.v1.getIdUnidadMateriaConfiguracionDetalle(),                                        x.v1.getUnidadMateriaConfiguracionCriterio(), x.v1.getIdUnidadMateriaConfiguracionCriterio(), cal, cal.getCalificacion()));                            }                        });*/            seq(e).innerJoin(seq(grupos), (e1, g1) -> (e1.getGrupo().getIdGrupo().equals(g1.getIdGrupo())))                    .innerJoin(seq(ca), (g2, ca1) -> (ca1.getCveGrupo().getIdGrupo().equals(g2.v2.getIdGrupo())))                    .innerJoin(seq(pem), (ca2, pem1) -> (ca2.v2.getIdPlanMateria().getIdPlanMateria().equals(pem1.getIdPlanMateria())))                    .innerJoin(seq(m), (pem2, m1) -> (pem2.v2.getIdMateria().getIdMateria().equals(m1.getIdMateria())))                    .innerJoin(seq(um), (m2, um1) -> (um1.getIdMateria().getIdMateria().equals(m2.v2.getIdMateria())))                    .innerJoin(seq(umc), (ca3, umc1) -> (umc1.getCarga().getCarga().equals(ca3.v1.v1.v1.v2.getCarga()) &&                            umc1.getIdUnidadMateria().getIdUnidadMateria().equals(ca3.v2.getIdUnidadMateria())))                    .innerJoin(seq(umcc), (umc2, umcc1) -> (umcc1.getUnidadMateriaConfiguracion().getConfiguracion().equals(umc2.v2.getConfiguracion())))                    .innerJoin(seq(criterios), (umcc2, criterio) -> (umcc2.v2.getCriterio1().getCriterio().equals(criterio.getCriterio())))                    .innerJoin(seq(umcd), (criterio1, umcd1) -> (umcd1.getCriterio().getCriterio().equals(criterio1.v2.getCriterio()) && umcd1.getConfiguracion().getConfiguracion().equals(criterio1.v1.v1.v2.getConfiguracion())))                    .leftOuterJoin(seq(calificaciones), (umcd2, calificacion) -> (calificacion.getConfiguracionDetalle().getConfiguracionDetalle().equals(umcd2.v2.getConfiguracionDetalle()) && calificacion.getIdEstudiante().getIdEstudiante().equals(umcd2.v1.v1.v1.v1.v1.v1.v1.v1.v1.getIdEstudiante())))                    .forEach(x -> {                        if(x.v2 != null){                            cpum.add(new DtoCalificacionEstudiante.CalificacionesPorUnidadyMateria(x.v1.v1.v1.v1.v1.v1.v1.v1.v1.v2, x.v1.v1.v1.v1.v1.v1.v1.v1.v1.v2.getIdGrupo(),                                    x.v1.v1.v1.v1.v1.v1.v1.v1.v2, x.v1.v1.v1.v1.v1.v1.v1.v1.v2.getCarga(), x.v1.v1.v1.v1.v1.v1.v1.v2, x.v1.v1.v1.v1.v1.v1.v1.v2.getIdPlanMateria(),                                    x.v1.v1.v1.v1.v1.v1.v2, x.v1.v1.v1.v1.v1.v1.v2.getIdMateria(), x.v1.v1.v1.v1.v1.v2, x.v1.v1.v1.v1.v1.v2.getIdUnidadMateria(),                                    x.v1.v1.v1.v1.v2, x.v1.v1.v1.v1.v2.getConfiguracion(), x.v1.v2, x.v1.v2.getConfiguracionDetalle(),                                    x.v1.v1.v1.v2, x.v1.v1.v1.v2.getUnidadMateriaConfiguracion().getConfiguracion(), x.v2, x.v2.getCalificacion()));                        }else{                            Calificacion cal = new Calificacion();                            cal.setConfiguracionDetalle(x.v1.v2);                            cal.setIdEstudiante(x.v1.v1.v1.v1.v1.v1.v1.v1.v1.v1);                            cal.setCalificacion(Long.parseLong("0"));                            cal.setValor(0.0);                            cpum.add(new DtoCalificacionEstudiante.CalificacionesPorUnidadyMateria(x.v1.v1.v1.v1.v1.v1.v1.v1.v1.v2, x.v1.v1.v1.v1.v1.v1.v1.v1.v1.v2.getIdGrupo(),                                    x.v1.v1.v1.v1.v1.v1.v1.v1.v2, x.v1.v1.v1.v1.v1.v1.v1.v1.v2.getCarga(), x.v1.v1.v1.v1.v1.v1.v1.v2, x.v1.v1.v1.v1.v1.v1.v1.v2.getIdPlanMateria(),                                    x.v1.v1.v1.v1.v1.v1.v2, x.v1.v1.v1.v1.v1.v1.v2.getIdMateria(), x.v1.v1.v1.v1.v1.v2, x.v1.v1.v1.v1.v1.v2.getIdUnidadMateria(),                                    x.v1.v1.v1.v1.v2, x.v1.v1.v1.v1.v2.getConfiguracion(), x.v1.v2, x.v1.v2.getConfiguracionDetalle(),                                    x.v1.v1.v1.v2, x.v1.v1.v1.v2.getUnidadMateriaConfiguracion().getConfiguracion(), cal, cal.getCalificacion()));                        }                    });            return ResultadoEJB.crearCorrecto(cpum, "Se empaquetaron las materias por estudiante seleccionado");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packMaterias)", e, null);        }    }    public ResultadoEJB<List<DtoCalificacionEstudiante.CalificacionePorUnidad>> packCalificacionesPorUnidadyMateria1(Integer matricula){        try{            List<DtoCalificacionEstudiante.CalificacionesPorUnidadyMateria> c = new ArrayList<>();            List<DtoCalificacionEstudiante.CalificacionesPorUnidadyMateria> c1 = new ArrayList<>();            List<DtoCalificacionEstudiante.CalificacionesPorDetalle> cpd = new ArrayList<>();            List<DtoCalificacionEstudiante.CalificacionePorCriterio> cpc = new ArrayList<>();            List<DtoCalificacionEstudiante.CalificacionePorUnidad> cpu = new ArrayList<>();            List<DtoCalificacionEstudiante.CalificacionePorUnidad> cpuFiltro;            c1 = obtenerCalificacionesPorUnidad(matricula).getValor();            c1.stream().forEach(x -> {                BigDecimal porcentaje_detalle = new BigDecimal(x.getUnidadMateriaConfiguracionDetalle().getPorcentaje());                BigDecimal valor = BigDecimal.ZERO;                if(x.getCalificacion().getValor() != null){                    valor = new BigDecimal(x.getCalificacion().getValor());                }                BigDecimal promedio_detalle = porcentaje_detalle.divide(new BigDecimal(100)).multiply(valor);                cpd.add(new DtoCalificacionEstudiante.CalificacionesPorDetalle(x.getMateria(), x.getIdMateria(),                        x.getUnidadMateria(), x.getIdUnidadMateria(), x.getUnidadMateriaConfiguracion(), x.getIdUnidadMateriaConfiguracion(), x.getUnidadMateriaConfiguracionDetalle(),                        x.getIdUnidadMateriaConfiguracionDetalle(), x.getUnidadMateriaConfiguracionCriterio(), x.getIdUnidadMateriaConfiguracionCriterio(), x.getCalificacion(),                        x.getIdCalificacion(), porcentaje_detalle, valor, promedio_detalle));            });            cpd.stream().forEach(x -> {                Estudiante estudiante = x.getCalificacion().getIdEstudiante();                BigDecimal sumaPromedio = cpd.stream().filter(a -> a.getIdUnidadMateriaConfiguracionCriterio().equals(x.getIdUnidadMateriaConfiguracionCriterio()) &&                        a.getIdMateria().equals(x.getIdMateria()) && a.getIdUnidadMateria().equals(x.getIdUnidadMateria()) &&                        a.getUnidadMateriaConfiguracionDetalle().getConfiguracionDetalle().equals(x.getUnidadMateriaConfiguracionDetalle().getConfiguracionDetalle()))                        .map(DtoCalificacionEstudiante.CalificacionesPorDetalle::getPromedio_detalle).reduce(BigDecimal.ZERO, BigDecimal::add);                BigDecimal porcentajeRecomendado = new BigDecimal(x.getUnidadMateriaConfiguracionCriterio().getCriterio1().getPorcentajeRecomendado());                BigDecimal promedioCriterio = porcentajeRecomendado.divide(new BigDecimal(100)).multiply(sumaPromedio);                cpc.add(new DtoCalificacionEstudiante.CalificacionePorCriterio(x.getIdMateria(), x.getMateria(), x.getIdUnidadMateria(), x.getUnidadMateria(),                        x.getUnidadMateriaConfiguracion(), x.getIdUnidadMateriaConfiguracionCriterio(), x.getUnidadMateriaConfiguracionCriterio(), x.getIdUnidadMateriaConfiguracionDetalle(),                        x.getUnidadMateriaConfiguracionDetalle(), estudiante, porcentajeRecomendado, promedioCriterio));            });            cpc.stream().forEach(x -> {                Grupo grupo = x.getEstudiante().getGrupo();                BigDecimal porcentaje = new BigDecimal(x.getConfiguracion().getPorcentaje());                BigDecimal promedioUnidad = cpc.stream().filter(b -> b.getMateria().getIdMateria().equals(x.getMateria().getIdMateria()) &&                        b.getUnidadMateria().getIdUnidadMateria().equals(x.getUnidadMateria().getIdUnidadMateria()))                        .map(DtoCalificacionEstudiante.CalificacionePorCriterio::getPromedioCriterio).reduce(BigDecimal.ZERO, BigDecimal::add).setScale(2, RoundingMode.HALF_UP);                String escala = "";                if(promedioUnidad.compareTo(BigDecimal.valueOf(0)) == 0 || promedioUnidad.compareTo(BigDecimal.valueOf(8)) < 0){                    escala = "NA";                }                if(promedioUnidad.compareTo(BigDecimal.valueOf(10)) == 0){                    escala = "AU";                    if(x.getUnidadMateria().getIntegradora() == Boolean.TRUE){                        escala = "CA";                    }                }                if((promedioUnidad.compareTo(BigDecimal.valueOf(9)) >= 0) && (promedioUnidad.compareTo(BigDecimal.valueOf(10)) < 0)){                    escala = "DE";                    if(x.getUnidadMateria().getIntegradora() == Boolean.TRUE){                        escala = "CD";                    }                }                if(promedioUnidad.compareTo(BigDecimal.valueOf(8)) >= 0 && promedioUnidad.compareTo(BigDecimal.valueOf(9)) < 0){                    escala = "SA";                    if(x.getUnidadMateria().getIntegradora() == Boolean.TRUE){                        escala = "CO";                    }                }                cpu.add(new DtoCalificacionEstudiante.CalificacionePorUnidad(x.getMateria(), x.getUnidadMateria(), x.getConfiguracion(), x.getEstudiante(), escala, porcentaje, promedioUnidad));            });            cpuFiltro = new ArrayList<>(new HashSet<>(cpu));            return ResultadoEJB.crearCorrecto(cpuFiltro, "Se empaquetaron las materias por estudiante seleccionado");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.packMaterias)", e, null);        }    }    public ResultadoEJB<List<DtoCalificacionEstudiante.CalificacionePorMateria>> packPromedioMateria(Integer matricula){        try {            List<DtoCalificacionEstudiante.CalificacionePorMateria> cpm, cpm1;            List<DtoCalificacionEstudiante.CalificacionePorMateria> cpmFiltro = new ArrayList<>();            List<DtoCalificacionEstudiante.CalificacionePorMateria> cpmFiltro1 = new ArrayList<>();            ResultadoEJB<List<DtoCalificacionEstudiante.CalificacionePorUnidad>> resultadoEJB = packCalificacionesPorUnidadyMateria1(matricula);            List<DtoCalificacionEstudiante.CalificacionePorUnidad> cpu = resultadoEJB.getValor();            List<DtoCalificacionEstudiante.TareaIntegradoraPorMateria> tipm = packTareaIntegradora(matricula).getValor();            cpu.forEach(x -> {                BigDecimal porcentaje = new BigDecimal(x.getConfiguracion().getPorcentaje());                BigDecimal promedioU = x.getPromedioUnidad();                BigDecimal promedio = porcentaje.divide(new BigDecimal(100)).multiply(promedioU);                cpmFiltro.add(new DtoCalificacionEstudiante.CalificacionePorMateria(x.getEstudiante().getGrupo(), x.getMateria(), promedio));            });            cpm1 = cpmFiltro;            cpmFiltro.forEach(x -> {                Double sumaPorcentaje = tipm.stream().filter(a -> x.getMateria().getIdMateria().equals(a.getMateria().getIdMateria()) && x.getGrupo().getIdGrupo().equals(a.getGrupo().getIdGrupo())).mapToDouble(b -> b.getTareaIntegradoraPromedio().getTareaIntegradora().getPorcentaje()).sum();                BigDecimal porcentaje = BigDecimal.valueOf(sumaPorcentaje);                Double sumaPromedio = tipm.stream().filter(a -> x.getMateria().getIdMateria().equals(a.getMateria().getIdMateria()) && x.getGrupo().getIdGrupo().equals(a.getGrupo().getIdGrupo())).mapToDouble(b -> b.getTareaIntegradoraPromedio().getValor()).sum();                BigDecimal promedio = BigDecimal.valueOf(sumaPromedio);                BigDecimal promedioTI = porcentaje.divide(new BigDecimal(100), RoundingMode.FLOOR).multiply(promedio);                BigDecimal sumaPromedioMateria = cpm1.stream().filter(a -> a.getMateria().getIdMateria()                        .equals(x.getMateria().getIdMateria())).map(DtoCalificacionEstudiante.CalificacionePorMateria::getPromedio).reduce(BigDecimal.ZERO, BigDecimal::add).add(promedioTI);                cpmFiltro1.add(new DtoCalificacionEstudiante.CalificacionePorMateria(x.getGrupo(), x.getMateria(), sumaPromedioMateria));            });            cpm = new ArrayList<>(new HashSet<>(cpmFiltro1));            return ResultadoEJB.crearCorrecto(cpm, "Lista completa de periodos");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.obtenerListaPeriodosEscolares)", e, null);        }    }    public ResultadoEJB<List<DtoCalificacionEstudiante.CalificacionePorMateria>> packCalificacionesFinales(Integer matricula){        try{            List<DtoCalificacionEstudiante.CalificacionePorMateria> cpm = new ArrayList<>();            List<DtoCalificacionEstudiante.CalificacionePorMateria> resultadosCPM = packPromedioMateria(matricula).getValor();            List<DtoCalificacionEstudiante.CalificacionesNivelacionPorMateria> resultadosPNPM = packPromedioNivelacionPorMateria(matricula).getValor();            resultadosCPM.stream().forEach(x -> {                resultadosPNPM.stream().filter(a -> a.getIdMateria().equals(x.getMateria().getIdMateria())).forEach(y -> {                    if(x.getPromedio().compareTo(BigDecimal.valueOf(8)) < 0){                        cpm.add(new DtoCalificacionEstudiante.CalificacionePorMateria(x.getGrupo(), x.getMateria(), y.getPromedio()));                    }else{                        cpm.add(new DtoCalificacionEstudiante.CalificacionePorMateria(x.getGrupo(), x.getMateria(), x.getPromedio()));                    }                });            });            return ResultadoEJB.crearCorrecto(cpm, "Lista completa de periodos");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.obtenerListaPeriodosEscolares)", e, null);        }    }    public ResultadoEJB<BigDecimal> obtenerPromedioCuatrimestral(Integer matricula, Integer periodo){        try{            List<DtoCalificacionEstudiante.CalificacionePorMateria> cpm = packCalificacionesFinales(matricula).getValor().stream().filter(a -> a.getGrupo().getPeriodo() == periodo).collect(Collectors.toList());            BigDecimal promedioCuatrimestral = cpm.stream().map(DtoCalificacionEstudiante.CalificacionePorMateria::getPromedio).reduce(BigDecimal.ZERO, BigDecimal::add);            return ResultadoEJB.crearCorrecto(promedioCuatrimestral.setScale(2, RoundingMode.FLOOR), "Lista completa de periodos");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.obtenerListaPeriodosEscolares)", e, null);        }    }    public ResultadoEJB<List<BigDecimal>> obtenerPromedioAcumulado(Integer matricula){        try{            List<BigDecimal> promediosAcumulados = new ArrayList<>();            List<DtoCalificacionEstudiante.CalificacionePorMateria> cpm = packCalificacionesFinales(matricula).getValor();            List<DtoCalificacionEstudiante.MateriasPorEstudiante> mpe = packMaterias(matricula).getValor();            List<PeriodosEscolares> periodos = new ArrayList<>(obtenerListaPeriodosEscolares().getValor());            periodos.stream().forEach(x -> {                BigDecimal totalMaterias = new BigDecimal(mpe.stream().filter(b -> b.getGrupo().getPeriodo() == x.getPeriodo()).count());                BigDecimal promedioAcumulado = cpm.stream().filter(a -> a.getGrupo().getPeriodo() == x.getPeriodo()).map(DtoCalificacionEstudiante.CalificacionePorMateria::getPromedio).reduce(BigDecimal.ZERO, BigDecimal::add);                BigDecimal promedio = promedioAcumulado.divide(totalMaterias, RoundingMode.FLOOR);                promediosAcumulados.add(promedio.setScale(2, RoundingMode.FLOOR));            });            return ResultadoEJB.crearCorrecto(promediosAcumulados, "Lista completa de periodos");        }catch (Exception e){            return ResultadoEJB.crearErroneo(1, "No se pudo obtener el periodo. (EjbConsultaCalificacion.obtenerListaPeriodosEscolares)", e, null);        }    }}